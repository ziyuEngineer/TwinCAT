<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="RPC_PanelProcess" Id="{7023737c-9355-4fda-81da-0dd36a23595c}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK RPC_PanelProcess EXTENDS TcBaseModuleRegistered IMPLEMENTS IPanelProcess
VAR
	pInput AT%I* : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1] OF USINT; // Connect to panel input channel 1 2 3 4 5 7 
	pOutput AT%Q* : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1] OF USINT; // Connect to panel output channel 1 2 3 4 5 7
	lastInput : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1] OF USINT; // Record input channel value of last cycle
	valChanged : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1] OF BOOL; // used in button mutex check since some mutex pairs appear in different channels 
	
	// Decompose value of input channel into status of single button, one channel represents eight buttons
	buttonStatus : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1,0..GlobalVar.CHANNEL_BUTTON_NUM-1] OF BOOL := [FALSE]; 
	effectiveButtonStatus : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM-1,0..GlobalVar.CHANNEL_BUTTON_NUM-1] OF BOOL := [FALSE];
	
	mutexPairs: ARRAY[0..30, 0..1] OF PanelButton; // 30 represents the maximum number of possible pairs
	mutexPairNum : INT := 0;
END_VAR

// HandWheel Functions
VAR
	handwheelCurrPos 	AT%I* :  USINT;
	handwheelLastPos 	: USINT;
	handwheelTotalPos : ARRAY[0..GlobalVar.MC_AXIS_NUM - 1] OF LREAL := [0.0]; // X Y Z A C
	
	panelInfoOutput AT%Q* : PanelInfo; // Necessary information sent to Cpp module
END_VAR

// Special button handle
VAR
	iResetCount :INT := 0;
	bSpindleStopSet       : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_reinit" Id="{9369717a-2fcb-41c1-861e-a195f6dc4ea8}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_reinit();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mAssignSpecifcButtonCoordinate" Id="{c619d7a2-fe17-4c6a-91b9-de768462a63d}">
      <Declaration><![CDATA[METHOD mAssignSpecifcButtonCoordinate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ServoOn.row := 0;
ServoOn.column := 0;

X_Axis.row := 0;  
X_Axis.column := 6;  

Y_Axis.row := 0;  
Y_Axis.column := 7;

Z_Axis.row := 1;  
Z_Axis.column := 0;  

A_Axis.row := 1;  
A_Axis.column := 7;  

B_Axis.row := 2;  
B_Axis.column := 0;  

C_Axis.row := 2;  
C_Axis.column := 1;  

Spindle_CW.row := 2;
Spindle_CW.column := 2;

Spindle_CCW.row := 2;
Spindle_CCW.column := 4;

Spindle_Stop.row := 2;
Spindle_Stop.column	:= 3;

Spindle_Direct.row := 4;
Spindle_Direct.column := 0;
	
Tenth_Ratio.row := 4;  
Tenth_Ratio.column := 1;  
 
Hundredth_Ratio.row := 4;
Hundredth_Ratio.column := 2;

Thousandth_Ratio.row := 4;
Thousandth_Ratio.column := 3;

Reset_Button.row := 5;
Reset_Button.column := 0;

Execute_Button.row := 5;
Execute_Button.column := 1;

Cyclical_Run.row := 5;
Cyclical_Run.column := 2;

mGenerateMutexPair(X_Axis, Y_Axis);
mGenerateMutexPair(X_Axis, Z_Axis);
mGenerateMutexPair(X_Axis, A_Axis);
mGenerateMutexPair(X_Axis, B_Axis);
mGenerateMutexPair(X_Axis, C_Axis);
                                 
mGenerateMutexPair(Y_Axis, Z_Axis);
mGenerateMutexPair(Y_Axis, A_Axis);
mGenerateMutexPair(Y_Axis, B_Axis);
mGenerateMutexPair(Y_Axis, C_Axis);
                                 
mGenerateMutexPair(Z_Axis, A_Axis);
mGenerateMutexPair(Z_Axis, B_Axis);
mGenerateMutexPair(Z_Axis, C_Axis);
                                 
mGenerateMutexPair(A_Axis, B_Axis);
mGenerateMutexPair(A_Axis, C_Axis);
mGenerateMutexPair(B_Axis, C_Axis);

mGenerateMutexPair(Tenth_Ratio, Hundredth_Ratio);
mGenerateMutexPair(Tenth_Ratio, Thousandth_Ratio);
mGenerateMutexPair(Hundredth_Ratio, Thousandth_Ratio);

mGenerateMutexPair(Reset_Button, Execute_Button);
mGenerateMutexPair(Reset_Button, Cyclical_Run);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mDeselectAxis" Id="{c2742bd3-30af-4788-b288-94e209eeb921}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD mDeselectAxis : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mDeselectAxis := S_FALSE;

mPopButton(X_Axis);
mPopButton(Y_Axis);
mPopButton(Z_Axis);
mPopButton(A_Axis);
mPopButton(C_Axis);

mPopButton(Tenth_Ratio);
mPopButton(Hundredth_Ratio);
mPopButton(Thousandth_Ratio);

handwheelLastPos := handwheelCurrPos;

MEMSET(ADR(handwheelTotalPos),0, SIZEOF(handwheelTotalPos));

MEMSET(ADR(panelInfoOutput.Handwheel_EnabledAxisNum),0,SIZEOF(panelInfoOutput.Handwheel_EnabledAxisNum));
	
MEMSET(ADR(panelInfoOutput.Handwheel_dPos),0,SIZEOF(PanelInfo.Handwheel_dPos));

mDeselectAxis := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mFaultReset" Id="{e4519df6-62e1-4f29-ab8a-cae8656664ba}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mFaultReset : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// When system state falls into Fault, turn off all buttons for safety
MEMSET(ADR(effectiveButtonStatus), 0, SIZEOF(effectiveButtonStatus));
MEMSET(ADR(valChanged) ,0, SIZEOF(valChanged));
MEMSET(ADR(lastInput), 0, SIZEOF(lastInput));
MEMSET(ADR(pInput), 0, SIZEOF(pInput));
MEMSET(ADR(pOutput), 0, SIZEOF(pOutput));
bSpindleStopSet := FALSE;

mFaultReset := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGenerateMutexPair" Id="{7c424310-6da1-448a-8409-926b8a658f92}">
      <Declaration><![CDATA[METHOD mGenerateMutexPair : BOOL
VAR_INPUT
	button1 : PanelButton;
	button2 : PanelButton;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mutexPairs[mutexPairNum,0] := button1;
mutexPairs[mutexPairNum,1] := button2;

mutexPairNum := mutexPairNum + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetButtonStatus" Id="{0a304c07-3e31-42e3-917c-868f0b1e321c}">
      <Declaration><![CDATA[METHOD mGetButtonStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mGetServoButtonStatus();

mGetExecuteButtonStatus();

mGetHandWheelRatio();

mGetHandwheelEnabledAxis();

mGetSpindleButtonStatus();

mGetResetButtonStatus();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetExecuteButtonStatus" Id="{ccd90036-2806-476e-823e-ff79139ec63f}">
      <Declaration><![CDATA[METHOD mGetExecuteButtonStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute_Button.pressed := effectiveButtonStatus[Execute_Button.row, Execute_Button.column];

IF Execute_Button.pressed THEN
	panelInfoOutput.Execute := TRUE;

ELSE	
	panelInfoOutput.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetHandwheelEnabledAxis" Id="{39dc7124-cdf4-44e7-b698-df2fee352ffb}">
      <Declaration><![CDATA[METHOD mGetHandwheelEnabledAxis : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[X_Axis.pressed := effectiveButtonStatus[X_Axis.row, X_Axis.column];
Y_Axis.pressed := effectiveButtonStatus[Y_Axis.row, Y_Axis.column];
Z_Axis.pressed := effectiveButtonStatus[Z_Axis.row, Z_Axis.column];
A_Axis.pressed := effectiveButtonStatus[A_Axis.row, A_Axis.column];
C_Axis.pressed := effectiveButtonStatus[C_Axis.row, C_Axis.column];

// Assume no axis selected
panelInfoOutput.Handwheel_EnabledAxisNum := 0;

IF X_Axis.pressed THEN // X axis selected; 
	panelInfoOutput.Handwheel_EnabledAxisNum := AxisOrder.Axis_X;
ELSIF Y_Axis.pressed THEN // Y axis selected
	panelInfoOutput.Handwheel_EnabledAxisNum := AxisOrder.Axis_Y;	
ELSIF Z_Axis.pressed THEN // Z axis selected
	panelInfoOutput.Handwheel_EnabledAxisNum := AxisOrder.Axis_Z;
ELSIF A_Axis.pressed THEN // A axis selected
	panelInfoOutput.Handwheel_EnabledAxisNum := AxisOrder.Axis_A;	
ELSIF C_Axis.pressed THEN // C axis selected
	panelInfoOutput.Handwheel_EnabledAxisNum := AxisOrder.Axis_C;
END_IF

IF panelInfoOutput.Handwheel_EnabledAxisNum <> 0 THEN
	mHandwheelProcess(panelInfoOutput.Handwheel_EnabledAxisNum - 1);
END_IF

handwheelLastPos := handwheelCurrPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetHandwheelRatio" Id="{6980860b-de1f-462c-aa8b-6b23b6242898}">
      <Declaration><![CDATA[METHOD mGetHandwheelRatio : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Tenth_Ratio.pressed := effectiveButtonStatus[Tenth_Ratio.row, Tenth_Ratio.column];
Hundredth_Ratio.pressed := effectiveButtonStatus[Hundredth_Ratio.row, Hundredth_Ratio.column];
Thousandth_Ratio.pressed := effectiveButtonStatus[Thousandth_Ratio.row, Thousandth_Ratio.column];

IF Tenth_ratio.pressed THEN
	panelInfoOutput.Handwheel_Ratio := 0.1;
ELSIF Hundredth_ratio.pressed THEN
	panelInfoOutput.Handwheel_Ratio := 0.01;
ELSIF Thousandth_ratio.pressed THEN
	panelInfoOutput.Handwheel_Ratio := 0.001;
ELSE	
	panelInfoOutput.Handwheel_Ratio := 0.0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetResetButtonStatus" Id="{5e3d4bca-fafe-403b-a8cd-d1ed16a20874}">
      <Declaration><![CDATA[METHOD mGetResetButtonStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset_Button.pressed := effectiveButtonStatus[Reset_Button.row, Reset_Button.column];

IF Reset_Button.pressed THEN
	panelInfoOutput.Reset := TRUE;

ELSE	
	panelInfoOutput.Reset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetServoButtonStatus" Id="{f2e5d312-112a-412d-a72f-8cc5c918974c}">
      <Declaration><![CDATA[METHOD mGetServoButtonStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ServoOn.pressed := effectiveButtonStatus[ServoOn.row, ServoOn.column];

IF ServoOn.pressed THEN
	panelInfoOutput.ServoOn := TRUE;

ELSE	
	panelInfoOutput.ServoOn := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetSpindleButtonStatus" Id="{c473a336-0237-4c66-88e5-98fa19213db6}">
      <Declaration><![CDATA[METHOD mGetSpindleButtonStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Spindle_CW.pressed := effectiveButtonStatus[Spindle_CW.row, Spindle_CW.column];
Spindle_CCW.pressed := effectiveButtonStatus[Spindle_CCW.row, Spindle_CCW.column];
Spindle_Stop.pressed := effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column];

IF Spindle_CW.pressed THEN
	panelInfoOutput.Spindle_Cmd := 1;
ELSIF Spindle_CCW.pressed THEN 
	panelInfoOutput.Spindle_Cmd := -1;	
ELSIF Spindle_Stop.pressed THEN
	panelInfoOutput.Spindle_Cmd := 0;
ELSE
	panelInfoOutput.Spindle_Cmd := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mHandwheelProcess" Id="{89dbf797-4e07-467a-8919-a78a12e6555e}">
      <Declaration><![CDATA[METHOD mHandwheelProcess : BOOL
VAR_INPUT
	index   : INT;
END_VAR

VAR
	dPos    : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[dPos := handwheelCurrPos - handwheelLastPos;

IF dPos > 100 THEN
	dPos := GlobalVar.HANDWHEEL_FULL_SCALE - dPos;
ELSIF dPos < -100 THEN
	dPos := GlobalVar.HANDWHEEL_FULL_SCALE + dPos;
END_IF

handwheelTotalPos[index] := handwheelTotalPos[index] + panelInfoOutput.Handwheel_Ratio * dPos;

panelInfoOutput.Handwheel_dPos[index] := handwheelTotalPos[index];
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mHandwheelReset" Id="{5e9aa5a1-207b-4418-9478-944e4853d057}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mHandwheelReset : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mHandwheelReset := S_FALSE;

handwheelLastPos := handwheelCurrPos;

MEMSET(ADR(handwheelTotalPos),0, SIZEOF(handwheelTotalPos));
	
MEMSET(ADR(panelInfoOutput.Handwheel_dPos),0,SIZEOF(PanelInfo.Handwheel_dPos));

mHandwheelReset := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInitialize" Id="{5c5134ea-d2af-4a24-aa12-e8c20f7abd8e}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mInitialize : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mAssignSpecifcButtonCoordinate();

handwheelLastPos := handwheelCurrPos;

mInitialize := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInput" Id="{e6ac1574-1af2-4628-a415-16a7b4580ad8}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mInput : HRESULT

VAR
	iLoop : INT := 0;
	jLoop : INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iLoop := 0 TO GlobalVar.PANEL_CHANNEL_NUM - 1 DO
	FOR jLoop := 0 TO GlobalVar.CHANNEL_BUTTON_NUM - 1 DO
		buttonStatus[iLoop, jLoop] := mParsePanelInput(pInput[iLoop], jLoop);
	END_FOR
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMutexCheck" Id="{fc71a66f-f141-40ed-afae-07fa135ef6c2}">
      <Declaration><![CDATA[METHOD mMutexCheck : BOOL
VAR_IN_OUT
	currentInput 	: ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1,0..GlobalVar.CHANNEL_BUTTON_NUM - 1] OF BOOL;
	lastInput 		: ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1,0..GlobalVar.CHANNEL_BUTTON_NUM - 1] OF BOOL;
	bChanged		: ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1] OF BOOL;
END_VAR
VAR
	iLoop : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iLoop := 0 TO mutexPairNum - 1 DO
	mMutexCheckSub(currentInput, lastInput, bChanged, mutexPairs[iLoop,0], mutexPairs[iLoop,1]);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMutexCheckSub" Id="{f1310209-cc44-4b32-9739-b5e67d048d41}">
      <Declaration><![CDATA[METHOD mMutexCheckSub : BOOL
VAR_IN_OUT
	current : ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1,0..GlobalVar.CHANNEL_BUTTON_NUM - 1] OF BOOL;
	last	: ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1,0..GlobalVar.CHANNEL_BUTTON_NUM - 1] OF BOOL;
	bChanged: ARRAY[0..GlobalVar.PANEL_CHANNEL_NUM - 1] OF BOOL;
END_VAR

VAR_INPUT
	button1 : PanelButton;
	button2 : PanelButton;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF current[button1.row,button1.column] AND last[button2.row,button2.column] THEN
	current[button2.row,button2.column] := TRUE;
	bChanged[button2.row] := TRUE;
END_IF

IF current[button2.row,button2.column] AND last[button1.row,button1.column] THEN
	current[button1.row,button1.column] := TRUE;
	bChanged[button1.row] := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mOutput" Id="{3bd07e0f-fa6c-4710-a23f-018e0c9d955e}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mOutput : HRESULT

VAR
	iLoop : INT := 0;
	jLoop : INT := 0;
	temp  :INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mSpecialButtonHandle();

mMutexCheck(buttonStatus, effectiveButtonStatus, valChanged);

FOR iLoop := 0 TO GlobalVar.PANEL_CHANNEL_NUM - 1 DO
	FOR jLoop := 0 TO GlobalVar.CHANNEL_BUTTON_NUM - 1 DO
		
		IF (iLoop = Spindle_Stop.row AND jLoop = Spindle_Stop.column) OR
		   (iLoop = Spindle_CCW.row AND jLoop = Spindle_CCW.column) OR
 		   (iLoop = Spindle_CW.row AND jLoop = Spindle_CW.column)	THEN
			CONTINUE;
		END_IF
		
		IF buttonStatus[iLoop, jLoop] AND ((lastInput[iLoop] <> pInput[iLoop]) OR valChanged[iLoop]) THEN
			effectiveButtonStatus[iLoop, jLoop] := NOT effectiveButtonStatus[iLoop, jLoop];
			
			temp := SHL(1, jLoop);
		
			IF effectiveButtonStatus[iLoop, jLoop] THEN
				pOutput[iLoop] := pOutput[iLoop] + INT_TO_USINT(temp);
			ELSE
				pOutput[iLoop] := pOutput[iLoop] - INT_TO_USINT(temp);
			END_IF
		END_IF
		
	END_FOR
	lastInput[iLoop] := pInput[iLoop];
	valChanged[iLoop] := FALSE;
END_FOR

mSpindleButtonsHandle();

mGetButtonStatus();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mParsePanelInput" Id="{0157b1aa-a59b-4beb-9a0f-8e1f9cd03c37}">
      <Declaration><![CDATA[METHOD mParsePanelInput : BOOL
VAR_INPUT
	input   	: USINT;
	parseDigit  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ((SHR(input,parseDigit) AND 2#1) = 2#1) THEN
	mParsePanelInput := TRUE;
ELSE
	mParsePanelInput := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPopButton" Id="{1eca21ca-259d-4964-b82a-bc3d6c662832}">
      <Declaration><![CDATA[METHOD mPopButton : BOOL
VAR_INPUT
	button : PanelButton;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF effectiveButtonStatus[button.row, button.column] THEN
	effectiveButtonStatus[button.row, button.column]:= FALSE;
	pOutput[button.row] := pOutput[button.row] - INT_TO_USINT(SHL(1, button.column));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPopServoButton" Id="{6f62ba11-7f4e-4da1-80d0-e68d2a27cbce}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mPopServoButton : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mPopButton(ServoOn);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSpecialButtonHandle" Id="{82f57fb0-8b79-4e84-9618-ec1e976ad42e}">
      <Declaration><![CDATA[METHOD mSpecialButtonHandle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Reset Button -- light on only when pressed and signal lasts for 5 ms
IF effectiveButtonStatus[Reset_Button.row, Reset_Button.column] THEN
	iResetCount := iResetCount + 1;
	IF iResetCount >= GlobalVar.RESET_DURATION THEN
		buttonStatus[Reset_Button.row, Reset_Button.column] := TRUE;
		pInput[Reset_Button.row] := INT_TO_USINT(SHL(1, Reset_Button.column));
		iResetCount := 0;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSpindleButtonsHandle" Id="{6eee9e60-4736-4f7f-9b67-28923567cccf}">
      <Declaration><![CDATA[METHOD mSpindleButtonsHandle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Spindle Stop Button -- always light on except press CW or CCW
effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column] := NOT(effectiveButtonStatus[Spindle_CW.row, Spindle_CW.column] OR effectiveButtonStatus[Spindle_CCW.row, Spindle_CCW.column]);

IF buttonStatus[Spindle_Stop.row, Spindle_Stop.column] AND (NOT effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column]) THEN
	effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column] := TRUE;
	
	mPopButton(Spindle_CW);
	
	mPopButton(Spindle_CCW);
	
END_IF

IF buttonStatus[Spindle_CW.row, Spindle_CW.column] AND effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column] AND (NOT effectiveButtonStatus[Spindle_CW.row, Spindle_CW.column]) THEN
	effectiveButtonStatus[Spindle_CW.row, Spindle_CW.column] := TRUE;
	pOutput[Spindle_CW.row] := pOutput[Spindle_CW.row] + INT_TO_USINT(SHL(1, Spindle_CW.column));
END_IF

IF buttonStatus[Spindle_CCW.row, Spindle_CCW.column] AND effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column] AND (NOT effectiveButtonStatus[Spindle_CCW.row, Spindle_CCW.column]) THEN
	effectiveButtonStatus[Spindle_CCW.row, Spindle_CCW.column] := TRUE;
	pOutput[Spindle_CCW.row] := pOutput[Spindle_CCW.row] + INT_TO_USINT(SHL(1, Spindle_CCW.column));
END_IF

IF effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column] AND (NOT bSpindleStopSet) THEN
	pOutput[Spindle_Stop.row] := pOutput[Spindle_Stop.row] + INT_TO_USINT(SHL(1, Spindle_Stop.column));
	bSpindleStopSet := TRUE;
END_IF

IF (NOT effectiveButtonStatus[Spindle_Stop.row, Spindle_Stop.column]) AND bSpindleStopSet THEN
	pOutput[Spindle_Stop.row] := pOutput[Spindle_Stop.row] - INT_TO_USINT(SHL(1, Spindle_Stop.column));	
	bSpindleStopSet := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{6f46d9bc-8c9c-4612-89ff-0cb7c2d620fa}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'checksuperglobal'}

METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR

VAR
	ipPanel : IPanelProcess;
	ipUnk : ITcUnknown;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_IPanelProcess)) THEN
	ipPanel := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipPanel);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSIF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcUnknown)) THEN
	ipUnk := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUnk);
	TcAddRef(); 
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := SUPER^.TcQueryInterface(iid, pipItf);
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>