<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="RPC_SoEProcess" Id="{0e961ccc-564a-4ae5-b7c8-be75a2c09028}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK RPC_SoEProcess EXTENDS TcBaseModuleRegistered IMPLEMENTS ISoEProcess

VAR
	fbSoEReset : ARRAY [0..GlobalVar.MAX_DRIVER_NUM-1] OF FB_SoEReset_ByDriveRef; //SoE Reset
	fbSoEWrite : ARRAY [0..GlobalVar.MAX_DRIVER_NUM-1] OF FB_SoEWrite_ByDriveRef; //SoE Write
	fbSoERead : ARRAY [0..GlobalVar.MAX_DRIVER_NUM-1] OF FB_SoERead_ByDriveRef; //SoE Read
	stPlcDriveRef AT %I* : ARRAY [0..GlobalVar.MAX_DRIVER_NUM-1] OF ST_PlcDriveRef;
	stDriveRef : ARRAY [0..GlobalVar.MAX_DRIVER_NUM-1] OF ST_DriveRef;
	bBusyFlag : ARRAY  [0..GlobalVar.MAX_DRIVER_NUM-1] OF BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_reinit" Id="{58e72f56-4e30-4a2f-9c0d-942644bf6bd0}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_reinit();]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInitialize" Id="{e68b46f7-1bbf-4718-a542-23489a344d15}">
      <Declaration><![CDATA[{attribute 'object_name' := 'mInitialize'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'checksuperglobal'}

METHOD mInitialize : HRESULT

VAR
	loopDriver 	: INT := 0;
	tempRet     : HRESULT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[mInitialize := S_FALSE;

FOR loopDriver := 0 TO GlobalVar.ACTIVE_DRIVER_NUM - 1 DO
		stDriveRef[loopDriver].sNetId  := F_CreateAmsNetId(stPlcDriveRef[loopDriver].aNetId); // convert the byte array into a string
		stDriveRef[loopDriver].nSlaveAddr := stPlcDriveRef[loopDriver].nSlaveAddr;
		stDriveRef[loopDriver].nDriveNo := stPlcDriveRef[loopDriver].nDriveNo;
		stDriveRef[loopDriver].nDriveType := stPlcDriveRef[loopDriver].nDriveType;
END_FOR

FOR loopDriver := 0 TO GlobalVar.ACTIVE_DRIVER_NUM - 1 DO
	tempRet := S_FALSE;
	IF (stDriveRef[loopDriver].sNetId <> '') AND (stDriveRef[loopDriver].nSlaveAddr <> 0) THEN
		tempRet := S_OK;
	END_IF
	mInitialize := tempRet AND S_OK;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mReset" Id="{6f04f64a-9355-4a19-9d69-2dd1d6f2dd26}">
      <Declaration><![CDATA[{attribute 'object_name' := 'mReset'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'checksuperglobal'}

METHOD mReset : HRESULT
VAR_INPUT
	bExecute	: BOOL;
END_VAR
VAR
	loopDriver 	: INT := 0;
	tempRet     : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mReset := S_FALSE;

IF bExecute THEN
	FOR loopDriver := 0 TO GlobalVar.ACTIVE_DRIVER_NUM - 1 DO 
		fbSoEReset[loopDriver](stDriveRef := stDriveRef[loopDriver], 
									bExecute := TRUE, tTimeout := TIME#10S,
									bBusy=>bBusyFlag[loopDriver], bError=>, iAdsErrId=>, iSercosErrId=>);
		tempRet := S_FALSE;
		IF NOT bBusyFlag[loopDriver] THEN // This output is set when the function block is activated, and remains set until a feedback is received.
			fbSoEReset[loopDriver](stDriveRef := stDriveRef[loopDriver], bExecute := FALSE);				
			tempRet := S_OK;
		END_IF
		mReset := tempRet AND S_OK;
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSoEWritePositionLoopKv" Id="{640dc871-2d90-4df5-bbb3-75c8d8e2a88e}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mSoEWritePositionLoopKv : HRESULT
VAR_INPUT
	axis	: INT;
	value	: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSoEWriteVelocityLoopKp" Id="{5cb250b0-ceb6-468f-ab7e-abaf795f228f}">
      <Declaration><![CDATA[{attribute 'TcTypeSystem'}
{attribute 'no-analysis'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}

METHOD mSoEWriteVelocityLoopKp : HRESULT
VAR_INPUT
	axis	: INT;
	value	: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSoEWrite[axis](stDriveRef := stDriveRef[axis],
				nIdn := S_0_IDN + 100, // S-0-0100 Velocity loop proportional gain
				nElement := 16#40, // Value element
				pSrcBuf := ADR(value),
				cbBufLen := SIZEOF(value),
				bExecute := TRUE,
				tTimeOut := DEFAULT_ADS_TIMEOUT);
				
IF NOT fbSoEWrite[axis].bBusy THEN
	IF NOT fbSoEWrite[axis].bError THEN 
        (* write successful *)
       fbSoEWrite[axis](bExecute := FALSE);
    END_IF 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{c52567dc-1bfd-4f9f-b30e-70df7a552f1c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'checksuperglobal'}

METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR

VAR
	ipSoE : ISoEProcess;
	ipUnk : ITcUnknown;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ISoEProcess)) THEN
	ipSoE := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipSoE);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSIF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcUnknown)) THEN
	ipUnk := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUnk);
	TcAddRef(); 
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := SUPER^.TcQueryInterface(iid, pipItf);
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>