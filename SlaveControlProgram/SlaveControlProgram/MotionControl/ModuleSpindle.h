///////////////////////////////////////////////////////////////////////////////
// ModuleSpindle.h
#pragma once

#include "MotionControlInterfaces.h"
#include "SpindleController.h"
#include "SpindleStateMachine.h"
#include "TcFileAccessInterfaces.h"
#include "tinyxml2.h"
#include "TcRtInterfaces.h"

using namespace tinyxml2;

class CModuleSpindle 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ISpindleInterface
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_MotionControlCModuleSpindle)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CModuleSpindle();
	virtual	~CModuleSpindle();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ISpindleInterface
	virtual HRESULT TCOMAPI RequestRotating(SpindleRot RotData);
	virtual HRESULT TCOMAPI RequestStop();
	virtual HRESULT TCOMAPI SetVelLimit(SpindleVelLimit VelLimit);
	virtual HRESULT TCOMAPI RequestPositioning(SpindlePosition PositionData);
	virtual HRESULT TCOMAPI ReportCurrentState(SpindleState& curr_state);
	virtual HRESULT TCOMAPI RequestSpindleEnable();
	virtual HRESULT TCOMAPI IsSpindleEnable(bool& is_enable);
	virtual HRESULT TCOMAPI IsSpindleMoving(bool& is_moving);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Xml related variables
	UINT ReadFile(PCCH szFileNameRead, char* contents, UINT max_read);
	HRESULT ParseFileAndAssignValue(const char* xml_spindle);
	ITcFileAccessPtr m_spFileAccess;
	PCCH m_SpindleConfigPath = "%TC_RESOURCEPATH%Spindle.xml";

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	ModuleSpindleParameter m_Parameter;
	ULONG m_CycleTime;
	ModuleSpindleInputs m_Inputs;
	ModuleSpindleOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	CSpindleController m_SpindleController;
	SpindleStateMachine* m_SpindleStateMachine;

	// CriticalSections are described in the SDK in TcRtInterfaces.h and are therefore intended for the real-time context.
	CCriticalSectionInstance m_csInstance;
};
