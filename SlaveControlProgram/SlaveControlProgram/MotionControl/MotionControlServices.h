///////////////////////////////////////////////////////////////////////////////
// MotionControlServices.h

#pragma once

#include "TcServices.h"

const ULONG DrvID_MotionControl = 0x3F000000;
#define SRVNAME_MOTIONCONTROL "MotionControl"

///<AutoGeneratedContent id="ClassIDs">
const CTCID CID_MotionControlCMotionControl = {0x73d79b9f,0xfc12,0x4c59,{0x97,0x3c,0x7e,0x93,0x7a,0x98,0x2d,0xda}};
const CTCID CID_MotionControlCModuleSpindle = {0x3754dd69,0xaf00,0x4776,{0xa5,0x3a,0x88,0x1a,0x1f,0xc8,0x34,0x36}};
const CTCID CID_MotionControlCModuleSafety = {0xb956c8e0,0x7a9e,0x4b80,{0xb4,0xb5,0xcb,0x85,0xd7,0xfb,0x7a,0xf1}};
const CTCID CID_MotionControlCModuleAxisGroup = {0xa90978e9,0xb255,0x4d60,{0xbd,0xe4,0x57,0xe1,0x76,0x17,0xbd,0x77}};
const CTCID CID_MotionControlCModuleTool = {0x8b453711,0xbfbc,0x4efe,{0xb0,0xef,0x54,0xa7,0x6d,0xa0,0x4b,0x5a}};
///</AutoGeneratedContent>

///<AutoGeneratedContent id="ParameterIDs">
const PTCID PID_MotionControlParameter = 0x00000001;
const PTCID PID_MotionControlPLC_PanelProcess = 0x00000003;
const PTCID PID_MotionControlModuleSpindle_Interface = 0x00000004;
const PTCID PID_MotionControlModuleAxisGroup_Interface = 0x00000002;
const PTCID PID_MotionControlPLC_ScopeProcess = 0x00000005;
const PTCID PID_ModuleSpindleParameter = 0x00000001;
const PTCID PID_ModuleSafetyParameter = 0x00000001;
const PTCID PID_ModuleSafetyMainModule_Interface = 0x00000002;
const PTCID PID_ModuleAxisGroupParameter = 0x00000001;
const PTCID PID_ModuleAxisGroupPLC_SoeProcess = 0x00000002;
const PTCID PID_ModuleToolParameter = 0x00000001;
///</AutoGeneratedContent>

///<AutoGeneratedContent id="DataTypes">
#if !defined(_TC_TYPE_EE32EC38_3CFD_4D8B_9EB4_C1E6E69C354B_INCLUDED_)
#define _TC_TYPE_EE32EC38_3CFD_4D8B_9EB4_C1E6E69C354B_INCLUDED_
typedef struct _MotionControlInfo
{
	SHORT AbsEncDir;
	unsigned char reserved1[2];
	LONG AbsEncRes;
	double RatedCurrent;
	double RatedTorque;
	SHORT TorDir;
	unsigned char reserved2[2];
	LONG AbsZeroPos;
	double TransmissionRatio;
	SHORT TorPdoMax;
	SHORT AdditiveTorque;
	SHORT MoveType;
	SHORT DriverType;
	bool Exposed;
	unsigned char reserved3[7];
} MotionControlInfo, *PMotionControlInfo;
#endif // !defined(_TC_TYPE_EE32EC38_3CFD_4D8B_9EB4_C1E6E69C354B_INCLUDED_)

#if !defined(_TC_TYPE_05051960_DD0C_4E1E_BE19_8CF043C7E5C0_INCLUDED_)
#define _TC_TYPE_05051960_DD0C_4E1E_BE19_8CF043C7E5C0_INCLUDED_
typedef struct _DriverInput
{
	USHORT StatusWord;
	unsigned char reserved1[2];
	LONG ActualAbsPos;
	SHORT ActualTor;
	unsigned char reserved2[2];
	LONG ActualVel;
	SHORT ErrorCode;
	char ActualOpMode;
	unsigned char reserved3;
	SHORT EffectiveTorqueCmd;
	unsigned char reserved4[2];
	LONG EffectivePositionCmd;
	LONG EffectiveVelocityCmd;
} DriverInput, *PDriverInput;
#endif // !defined(_TC_TYPE_05051960_DD0C_4E1E_BE19_8CF043C7E5C0_INCLUDED_)

#if !defined(_TC_TYPE_344A141A_6449_48B1_917F_47644EE068F6_INCLUDED_)
#define _TC_TYPE_344A141A_6449_48B1_917F_47644EE068F6_INCLUDED_
typedef struct _DriverOutput
{
	USHORT ControlWord;
	unsigned char reserved1[2];
	LONG TargetPosition;
	SHORT TargetTorque;
	unsigned char reserved2[2];
	LONG TargetVelocity;
	char OperationMode;
	unsigned char reserved3;
	SHORT AdditiveTorque;
	LONG AdditiveVelocity;
	LONG AdditivePosition;
} DriverOutput, *PDriverOutput;
#endif // !defined(_TC_TYPE_344A141A_6449_48B1_917F_47644EE068F6_INCLUDED_)

#if !defined(_TC_TYPE_E9135278_D628_443A_98B1_A863F07197E5_INCLUDED_)
#define _TC_TYPE_E9135278_D628_443A_98B1_A863F07197E5_INCLUDED_
enum SystemState : SHORT {
	eIdle = 0,
	eDisabled = 1,
	ePreStandby = 2,
	eStandby = 3,
	eManual = 4,
	eBuffering = 5,
	eContinuousExecution = 6,
	eFault = 7,
	eTest = 8,
	eRecovery = 9,
	eToolSwitching = 10
};
#endif // !defined(_TC_TYPE_E9135278_D628_443A_98B1_A863F07197E5_INCLUDED_)

#if !defined(_TC_TYPE_5DBD379E_C626_473C_91EA_93719C3F4C95_INCLUDED_)
#define _TC_TYPE_5DBD379E_C626_473C_91EA_93719C3F4C95_INCLUDED_
typedef struct _PanelInfo
{
	bool ServoOn;
	unsigned char reserved1;
	SHORT Handwheel_EnabledAxisNum;
	unsigned char reserved2[4];
	double Handwheel_Ratio;
	double Handwheel_Pos;
	SHORT Spindle_Cmd;
	bool Reset;
	bool Execute;
	unsigned char reserved3[4];
	double Spindle_Ratio;
	double MachiningAxis_Ratio;
} PanelInfo, *PPanelInfo;
#endif // !defined(_TC_TYPE_5DBD379E_C626_473C_91EA_93719C3F4C95_INCLUDED_)

#if !defined(_TC_TYPE_75816603_8B01_41ED_9F49_1001E13236B1_INCLUDED_)
#define _TC_TYPE_75816603_8B01_41ED_9F49_1001E13236B1_INCLUDED_
enum OpMode : SHORT {
	CSP = 8,
	CSV = 9,
	CST = 10
};
#endif // !defined(_TC_TYPE_75816603_8B01_41ED_9F49_1001E13236B1_INCLUDED_)

#if !defined(_TC_TYPE_760AEB87_AF7B_4178_B0AF_C2E7472652E4_INCLUDED_)
#define _TC_TYPE_760AEB87_AF7B_4178_B0AF_C2E7472652E4_INCLUDED_
enum DriverState : USHORT {
	eNotReadyForPowerUp = 0,
	eShutDownError = 40960,
	eLogicReadyForPowerOn = 16384,
	ePowerStageLocked = 32768,
	eReadyToOperate = 49152
};
#endif // !defined(_TC_TYPE_760AEB87_AF7B_4178_B0AF_C2E7472652E4_INCLUDED_)

#if !defined(_TC_TYPE_8A0CBD64_A622_4812_96E8_6466F6FAD96D_INCLUDED_)
#define _TC_TYPE_8A0CBD64_A622_4812_96E8_6466F6FAD96D_INCLUDED_
enum MasterControlWord : USHORT {
	eHaltDrive = 0,
	eStopDrive = 1,
	eControlUnitSync = 1024,
	eRestartDrive = 8192,
	eDriveOff = 24576,
	eDriveOn_CSP = 57344,
	eDriveOn_CST = 57600,
	eDriveOn_CSV = 57856
};
#endif // !defined(_TC_TYPE_8A0CBD64_A622_4812_96E8_6466F6FAD96D_INCLUDED_)

#if !defined(_TC_TYPE_2AB905D5_7D46_411F_BE58_01268BBF5FBB_INCLUDED_)
#define _TC_TYPE_2AB905D5_7D46_411F_BE58_01268BBF5FBB_INCLUDED_
enum AxisOrder : SHORT {
	Axis_X = 1,
	Axis_Y = 2,
	Axis_Z = 3,
	Axis_A = 4,
	Axis_C = 5,
	Spindle = 6
};
#endif // !defined(_TC_TYPE_2AB905D5_7D46_411F_BE58_01268BBF5FBB_INCLUDED_)

#if !defined(_TC_TYPE_5CBC67ED_7FEB_485B_91B9_3CE3460A4A42_INCLUDED_)
#define _TC_TYPE_5CBC67ED_7FEB_485B_91B9_3CE3460A4A42_INCLUDED_
typedef struct _AxisInformation
{
	double CurrentPos;
	double CurrentVel;
	SHORT CurrentTor;
	unsigned char CurrentMode;
	unsigned char reserved1[5];
	double CommandPos;
	double CommandVel;
	SHORT CommandTor;
	SHORT CurrentStatus;
	unsigned char reserved2[4];
} AxisInformation, *PAxisInformation;
#endif // !defined(_TC_TYPE_5CBC67ED_7FEB_485B_91B9_3CE3460A4A42_INCLUDED_)

#if !defined(_TC_TYPE_8A554618_FB22_4EDD_9FCF_D053B7A70EC0_INCLUDED_)
#define _TC_TYPE_8A554618_FB22_4EDD_9FCF_D053B7A70EC0_INCLUDED_
typedef struct _InterpolationParameter
{
	double MaxVelocity;
	double MaxAcceleration;
	double MaxJerk;
	double CycleTime;
	double Tolerance;
} InterpolationParameter, *PInterpolationParameter;
#endif // !defined(_TC_TYPE_8A554618_FB22_4EDD_9FCF_D053B7A70EC0_INCLUDED_)

#if !defined(_TC_TYPE_F1F3C2D0_7F5A_4C6C_A483_0A5FA097C058_INCLUDED_)
#define _TC_TYPE_F1F3C2D0_7F5A_4C6C_A483_0A5FA097C058_INCLUDED_
enum ControlWordGeneral : SHORT {
	eDisableVoltage = 0,
	eQuickStop = 2,
	eShutdown = 6,
	eDisableOperation = 7,
	eSwitchOn = 7,
	eEnableOperation = 15,
	eFaultReset = 128
};
#endif // !defined(_TC_TYPE_F1F3C2D0_7F5A_4C6C_A483_0A5FA097C058_INCLUDED_)

#if !defined(_TC_TYPE_6B6236F7_1899_4101_9CCB_762E700EF682_INCLUDED_)
#define _TC_TYPE_6B6236F7_1899_4101_9CCB_762E700EF682_INCLUDED_
enum DriverStateGeneral : SHORT {
	eNotReadyToSwitchOn = 0,
	eSwitchOnDisabled = 64,
	eReadyToSwitchOn = 33,
	eSwitchedOn = 35,
	eOperationEnabled = 39,
	eQuickStopActive = 7,
	eFaultReactionActive = 15,
	eDriverFault = 8,
	eQuickStopBit = 32
};
#endif // !defined(_TC_TYPE_6B6236F7_1899_4101_9CCB_762E700EF682_INCLUDED_)

#if !defined(_TC_TYPE_6C52FF3C_3F1E_4DF4_B88E_56EAE4037B12_INCLUDED_)
#define _TC_TYPE_6C52FF3C_3F1E_4DF4_B88E_56EAE4037B12_INCLUDED_
typedef struct _MetaData
{
	unsigned char CommandType;
	unsigned char reserved1[3];
	ULONG SourceActionBlockIndex;
	ULONG Index;
} MetaData, *PMetaData;
#endif // !defined(_TC_TYPE_6C52FF3C_3F1E_4DF4_B88E_56EAE4037B12_INCLUDED_)

#if !defined(_TC_TYPE_B12E5C91_9B4E_4C5F_8515_574B83ACC3F6_INCLUDED_)
#define _TC_TYPE_B12E5C91_9B4E_4C5F_8515_574B83ACC3F6_INCLUDED_
typedef struct _NewMotionCommand
{
	double Pos[5];
	double Vel[5];
	double Acc[5];
	double AdditivePos[5];
	double AdditiveVel[5];
	double AdditiveTor[5];
} NewMotionCommand, *PNewMotionCommand;
#endif // !defined(_TC_TYPE_B12E5C91_9B4E_4C5F_8515_574B83ACC3F6_INCLUDED_)

#if !defined(_TC_TYPE_0C8C736F_2009_4A9B_BA79_A373A15B7252_INCLUDED_)
#define _TC_TYPE_0C8C736F_2009_4A9B_BA79_A373A15B7252_INCLUDED_
typedef struct _OtherCommand
{
	ULONG CommandFunction;
	unsigned char reserved1[4];
	double Data;
} OtherCommand, *POtherCommand;
#endif // !defined(_TC_TYPE_0C8C736F_2009_4A9B_BA79_A373A15B7252_INCLUDED_)

#if !defined(_TC_TYPE_B1C3DEDA_F44B_40B0_BA64_EAB208DE948D_INCLUDED_)
#define _TC_TYPE_B1C3DEDA_F44B_40B0_BA64_EAB208DE948D_INCLUDED_
typedef struct _FullCommand
{
	MetaData metaData;
	unsigned char reserved1[4];
	NewMotionCommand motionCommand;
	OtherCommand otherCommand;
} FullCommand, *PFullCommand;
#endif // !defined(_TC_TYPE_B1C3DEDA_F44B_40B0_BA64_EAB208DE948D_INCLUDED_)

#if !defined(_TC_TYPE_1EE09E32_CE03_49CF_9231_332125EF3F61_INCLUDED_)
#define _TC_TYPE_1EE09E32_CE03_49CF_9231_332125EF3F61_INCLUDED_
enum CommandType : SHORT {
	eMotion = 1,
	eOther = 4,
	eSignalFinalized = 5,
	eNone = 0,
	eSingleAxisX = 10,
	eSingleAxisY = 11,
	eSingleAxisZ = 12,
	eSingleAxisA = 13,
	eSingleAxisC = 14
};
#endif // !defined(_TC_TYPE_1EE09E32_CE03_49CF_9231_332125EF3F61_INCLUDED_)

#if !defined(_TC_TYPE_9C29111D_2AB9_43BB_ACE9_11CADBF59920_INCLUDED_)
#define _TC_TYPE_9C29111D_2AB9_43BB_ACE9_11CADBF59920_INCLUDED_
typedef struct _SpindleRot
{
	double TargetVel;
} SpindleRot, *PSpindleRot;
#endif // !defined(_TC_TYPE_9C29111D_2AB9_43BB_ACE9_11CADBF59920_INCLUDED_)

#if !defined(_TC_TYPE_9689CD0C_E531_4687_BB83_6D4BB1F2F1CD_INCLUDED_)
#define _TC_TYPE_9689CD0C_E531_4687_BB83_6D4BB1F2F1CD_INCLUDED_
typedef struct _SpindleVelLimit
{
	double MaxVel;
	double MaxAcc;
	double MaxJerk;
} SpindleVelLimit, *PSpindleVelLimit;
#endif // !defined(_TC_TYPE_9689CD0C_E531_4687_BB83_6D4BB1F2F1CD_INCLUDED_)

#if !defined(_TC_TYPE_BEAC0974_F61C_4504_BEF4_0C5C6361CD2E_INCLUDED_)
#define _TC_TYPE_BEAC0974_F61C_4504_BEF4_0C5C6361CD2E_INCLUDED_
typedef struct _SpindlePosition
{
	double TargetPos;
	double TargetVel;
} SpindlePosition, *PSpindlePosition;
#endif // !defined(_TC_TYPE_BEAC0974_F61C_4504_BEF4_0C5C6361CD2E_INCLUDED_)

#if !defined(_TC_TYPE_77803924_0147_4DB7_B733_98772013DAE4_INCLUDED_)
#define _TC_TYPE_77803924_0147_4DB7_B733_98772013DAE4_INCLUDED_
typedef struct _SpindleCommand
{
	OpMode ModeOfOperation;
	unsigned char reserved1[6];
	double TargetPos;
	double TargetVel;
} SpindleCommand, *PSpindleCommand;
#endif // !defined(_TC_TYPE_77803924_0147_4DB7_B733_98772013DAE4_INCLUDED_)

#if !defined(_TC_TYPE_0BC67B36_C75E_4029_B338_FFB631C93168_INCLUDED_)
#define _TC_TYPE_0BC67B36_C75E_4029_B338_FFB631C93168_INCLUDED_
enum AxisGroupState : SHORT {
	eAxisGroupIdle = 0,
	eAxisGroupInitialization = 1,
	eAxisGroupDisabled = 2,
	eAxisGroupPreStandby = 3,
	eAxisGroupStandby = 4,
	eAxisGroupManualMoving = 5,
	eAxisGroupPreContinuousMoving = 6,
	eAxisGroupContinuousMoving = 7,
	eAxisGroupLimitViolation = 8,
	eAxisGroupEmergency = 9,
	eAxisGroupFault = 10,
	eAxisGroupRecovery = 11,
	eAxisGroupTest = 12,
	eAxisGroupPositioning = 13
};
#endif // !defined(_TC_TYPE_0BC67B36_C75E_4029_B338_FFB631C93168_INCLUDED_)

#if !defined(_TC_TYPE_DF678954_0CC7_4B57_A830_AD3AD6D5FFCE_INCLUDED_)
#define _TC_TYPE_DF678954_0CC7_4B57_A830_AD3AD6D5FFCE_INCLUDED_
enum SpindleState : SHORT {
	eSpindleIdle = 0,
	eSpindleInitialization = 1,
	eSpindleDisabled = 2,
	eSpindleEnable = 3,
	eSpindlePreMoving = 4,
	eSpindleRotating = 5,
	eSpindlePositioning = 6,
	eSpindlePostMoving = 7,
	eSpindleEmergency = 8,
	eSpindleFault = 9,
	eSpindleTest = 10
};
#endif // !defined(_TC_TYPE_DF678954_0CC7_4B57_A830_AD3AD6D5FFCE_INCLUDED_)

#if !defined(_TC_TYPE_79339E68_6E3A_41AF_8D1F_A9030AA0D6D8_INCLUDED_)
#define _TC_TYPE_79339E68_6E3A_41AF_8D1F_A9030AA0D6D8_INCLUDED_
enum CommandFunction : SHORT {
	eSpindle = 500,
	eM30 = 1000,
	eSetTool = 2
};
#endif // !defined(_TC_TYPE_79339E68_6E3A_41AF_8D1F_A9030AA0D6D8_INCLUDED_)

#if !defined(_TC_TYPE_915A7E92_BCA1_44CD_B0B0_09766308F5C5_INCLUDED_)
#define _TC_TYPE_915A7E92_BCA1_44CD_B0B0_09766308F5C5_INCLUDED_
enum AxisGroupErrorType : SHORT {
	eAxisGroupErrorNone = 0,
	eAxisGroupErrorGeneral = 1,
	eAxisGroupErrorPosOver = 2,
	eAxisGroupErrorVelOver = 3,
	eAxisGroupErrorEmergency = 4
};
#endif // !defined(_TC_TYPE_915A7E92_BCA1_44CD_B0B0_09766308F5C5_INCLUDED_)

#if !defined(_TC_TYPE_D08D34EA_915E_41E1_AC0D_7DBB1E98D59A_INCLUDED_)
#define _TC_TYPE_D08D34EA_915E_41E1_AC0D_7DBB1E98D59A_INCLUDED_
enum SpindleErrorType : SHORT {
	eSpindleErrorNone = 0,
	eSpindleErrorGeneral = 1,
	eSpindleErrorPosOver = 2,
	eSpindleErrorVelOver = 3,
	eSpindleErrorEmergency = 4
};
#endif // !defined(_TC_TYPE_D08D34EA_915E_41E1_AC0D_7DBB1E98D59A_INCLUDED_)

#if !defined(_TC_TYPE_027C9C33_01AD_4189_9A4E_B1392F3124FB_INCLUDED_)
#define _TC_TYPE_027C9C33_01AD_4189_9A4E_B1392F3124FB_INCLUDED_
enum SafetyState : SHORT {
	eSafetyStateNormal = 0,
	eSafetyStateWarning = 1,
	eSafetyStateEmergency = 2,
	eSafetyStateFault = 3,
	eSafetyStateRecovery = 4
};
#endif // !defined(_TC_TYPE_027C9C33_01AD_4189_9A4E_B1392F3124FB_INCLUDED_)

#if !defined(_TC_TYPE_B90EEFBB_BDE8_47C4_97D9_8F8B35025DE9_INCLUDED_)
#define _TC_TYPE_B90EEFBB_BDE8_47C4_97D9_8F8B35025DE9_INCLUDED_
typedef struct _SafetyParameter
{
	double PosUpperLimit;
	double PosLowerLimit;
	double MaxVelocity;
	double MaxAcceleration;
	double FollowingError;
	SHORT PositiveHardBit;
	SHORT NegativeHardBit;
	bool IsGantry;
	unsigned char reserved1[3];
	double GantryDeviationTolerance;
} SafetyParameter, *PSafetyParameter;
#endif // !defined(_TC_TYPE_B90EEFBB_BDE8_47C4_97D9_8F8B35025DE9_INCLUDED_)

#if !defined(_TC_TYPE_85615354_18AB_4F2D_A42C_B832F67F7D5F_INCLUDED_)
#define _TC_TYPE_85615354_18AB_4F2D_A42C_B832F67F7D5F_INCLUDED_
typedef struct _AxisGroupInformation
{
	AxisInformation SingleAxisInformation[6];
	double GantryDeviation;
} AxisGroupInformation, *PAxisGroupInformation;
#endif // !defined(_TC_TYPE_85615354_18AB_4F2D_A42C_B832F67F7D5F_INCLUDED_)

#if !defined(_TC_TYPE_2B7725C9_5F91_4924_9AA8_A953A844435B_INCLUDED_)
#define _TC_TYPE_2B7725C9_5F91_4924_9AA8_A953A844435B_INCLUDED_
typedef struct _AutoTuneParameter
{
	float VelocityLoopKp;
	USHORT VelocityLoopTn;
	USHORT PositionLoopKv;
	USHORT AccelerationFeedForwardGain;
	USHORT AccelerationFeedForwardTime;
} AutoTuneParameter, *PAutoTuneParameter;
#endif // !defined(_TC_TYPE_2B7725C9_5F91_4924_9AA8_A953A844435B_INCLUDED_)

#if !defined(_TC_TYPE_464CA556_6041_4811_B23A_0E20B8084750_INCLUDED_)
#define _TC_TYPE_464CA556_6041_4811_B23A_0E20B8084750_INCLUDED_
typedef bool PositioningAxis[5];
#endif // !defined(_TC_TYPE_464CA556_6041_4811_B23A_0E20B8084750_INCLUDED_)

#if !defined(_TC_TYPE_5BC53957_1CA7_4ACC_995C_73F4B9A23760_INCLUDED_)
#define _TC_TYPE_5BC53957_1CA7_4ACC_995C_73F4B9A23760_INCLUDED_
typedef double PositioningTarget[5];
#endif // !defined(_TC_TYPE_5BC53957_1CA7_4ACC_995C_73F4B9A23760_INCLUDED_)

#if !defined(_TC_TYPE_707B24A4_3C4E_4A5A_92B5_E8A4FEDFBAF0_INCLUDED_)
#define _TC_TYPE_707B24A4_3C4E_4A5A_92B5_E8A4FEDFBAF0_INCLUDED_
enum ToolState : SHORT {
	eToolStateInitialize = 0,
	eToolStateStandby = 1,
	eToolStateSwitching = 2,
	eToolStateUsing = 3,
	eToolStateFault = 4
};
#endif // !defined(_TC_TYPE_707B24A4_3C4E_4A5A_92B5_E8A4FEDFBAF0_INCLUDED_)

typedef struct _MotionControlInputs
{
	PanelInfo PanelInformation;
	FullCommand CommandInput[1024];
	ULONG CommandWriteIndex;
	OTCID OidPanelProcess;
	ULONG ErrorCode;
	OTCID OidScopeProcess;
} MotionControlInputs, *PMotionControlInputs;

typedef struct _MotionControlOutputs
{
	ULONG CommandReadIndex;
	SystemState MainState;
	unsigned char reserved1[2];
	struct {
		SHORT SelectedAxis;
		unsigned char reserved1[6];
		double HandwheelPos;
		double Ratio;
	} HandwheelMovingInfo;
	FullCommand ContinuousMovingCommand;
} MotionControlOutputs, *PMotionControlOutputs;

typedef struct _ModuleSpindleParameter
{
	MotionControlInfo SpindleDriverParam;
	InterpolationParameter SpindleInterpolationParam;
} ModuleSpindleParameter, *PModuleSpindleParameter;

typedef struct _ModuleSpindleInputs
{
	DriverInput SpindleInput;
	double SpindleTestInputs[20];
} ModuleSpindleInputs, *PModuleSpindleInputs;

typedef struct _ModuleSpindleOutputs
{
	DriverOutput SpindleOutput;
	SpindleState StateSpindle;
	unsigned char reserved1[2];
	AxisInformation SpindleInfo;
} ModuleSpindleOutputs, *PModuleSpindleOutputs;

typedef struct _ModuleSafetyParameter
{
	SafetyParameter SafetyParameterAxisGroup[6];
	SafetyParameter SafetyParameterSpindle;
	SHORT ActualAxisNum;
	SHORT ActualDriverNum;
	SHORT DriverNumPerAxis[5];
	unsigned char reserved1[2];
} ModuleSafetyParameter, *PModuleSafetyParameter;

typedef struct _ModuleSafetyInputs
{
	struct {
		AxisGroupInformation AxisGroupInfo;
		AxisInformation SpindleInfo;
		AxisGroupState StateAxisGroup;
		SpindleState StateSpindle;
		SHORT AxisGroupDigitalInput[6];
	} DiagnosticInfo;
	struct {
		double CommandDeviation[6];
		double FollowingError[6];
	} TorqueDiagnosticInfo;
} ModuleSafetyInputs, *PModuleSafetyInputs;

typedef struct _ModuleSafetyOutputs
{
	ULONG ErrorCode;
	SafetyState SafetyStatus;
	unsigned char reserved1[2];
	double TestTorqueError[6];
	double TestTorqueCmd[6];
} ModuleSafetyOutputs, *PModuleSafetyOutputs;

typedef struct _ModuleAxisGroupParameter
{
	MotionControlInfo DriverParameter[10];
	InterpolationParameter AxisGroupInterpolationParam[10];
	SHORT ActualAxisNum;
	SHORT TotalDriverNum;
	SHORT DriverNumPerAxis[5];
	unsigned char reserved1[2];
	double AxisPosUpperLimit[10];
	double AxisPosLowerLimit[10];
} ModuleAxisGroupParameter, *PModuleAxisGroupParameter;

typedef struct _ModuleAxisGroupInputs
{
	OTCID OidSoEProcess;
	DriverInput AxisInputs[10];
	unsigned char reserved1[4];
	double TestInputs[20];
	FullCommand ContinuousMovingCommand;
	struct {
		SHORT SelectedAxis;
		unsigned char reserved1[6];
		double HandwheelPos;
		double Ratio;
	} ManualMovingCommand;
} ModuleAxisGroupInputs, *PModuleAxisGroupInputs;

typedef struct _ModuleAxisGroupOutputs
{
	DriverOutput AxisOutputs[10];
	AxisGroupState StateAxisGroup;
	unsigned char reserved1[6];
	AxisGroupInformation AxisGroupInfo;
	struct {
		double TuningVelError[5];
		double TuningPosError[5];
	} AxisGroupTuningInfo;
	struct {
		double TorqueCommandDeviation[6];
		double TorqueFollowingError[6];
	} AxisGroupTorqueInfo;
	bool TestEnabled[5];
	unsigned char reserved2[3];
	double TestTarget[5];
} ModuleAxisGroupOutputs, *PModuleAxisGroupOutputs;

typedef struct _ModuleToolParameter
{
	ULONG data1;
	ULONG data2;
	double data3;
} ModuleToolParameter, *PModuleToolParameter;

typedef struct _ModuleToolInputs
{
	ULONG Value;
	ULONG Status;
	ULONG Data;
} ModuleToolInputs, *PModuleToolInputs;

typedef struct _ModuleToolOutputs
{
	ToolState StateTool;
} ModuleToolOutputs, *PModuleToolOutputs;

///</AutoGeneratedContent>



///<AutoGeneratedContent id="DataAreaIDs">
#define ADI_MotionControlInputs 0
#define ADI_MotionControlOutputs 1
#define ADI_ModuleSpindleInputs 0
#define ADI_ModuleSpindleOutputs 1
#define ADI_ModuleSafetyInputs 0
#define ADI_ModuleSafetyOutputs 1
#define ADI_ModuleAxisGroupInputs 0
#define ADI_ModuleAxisGroupOutputs 1
#define ADI_ModuleToolInputs 0
#define ADI_ModuleToolOutputs 1
///</AutoGeneratedContent>

///<AutoGeneratedContent id="InterfaceIDs">
#if !defined(_TC_IID_6B2564DD_368D_427F_B764_2303628B4EFB_INCLUDED_)
#define _TC_IID_6B2564DD_368D_427F_B764_2303628B4EFB_INCLUDED_
TCOM_DECL_INTERFACE("6b2564dd-368d-427f-b764-2303628b4efb", IMotionControlInterface)
#endif // !defined(_TC_IID_6B2564DD_368D_427F_B764_2303628B4EFB_INCLUDED_)

#if !defined(_TC_IID_DDC37991_4B80_49F3_A44A_196D30549B96_INCLUDED_)
#define _TC_IID_DDC37991_4B80_49F3_A44A_196D30549B96_INCLUDED_
TCOM_DECL_INTERFACE("ddc37991-4b80-49f3-a44a-196d30549b96", ISoEProcess)
#endif // !defined(_TC_IID_DDC37991_4B80_49F3_A44A_196D30549B96_INCLUDED_)

#if !defined(_TC_IID_8912121D_6A99_4443_9716_8F2A85D3B99E_INCLUDED_)
#define _TC_IID_8912121D_6A99_4443_9716_8F2A85D3B99E_INCLUDED_
TCOM_DECL_INTERFACE("8912121d-6a99-4443-9716-8f2a85d3b99e", IPanelProcess)
#endif // !defined(_TC_IID_8912121D_6A99_4443_9716_8F2A85D3B99E_INCLUDED_)

#if !defined(_TC_IID_A5B190D2_781F_49A4_9D2B_66AD8519040D_INCLUDED_)
#define _TC_IID_A5B190D2_781F_49A4_9D2B_66AD8519040D_INCLUDED_
TCOM_DECL_INTERFACE("a5b190d2-781f-49a4-9d2b-66ad8519040d", ISpindleInterface)
#endif // !defined(_TC_IID_A5B190D2_781F_49A4_9D2B_66AD8519040D_INCLUDED_)

#if !defined(_TC_IID_125C4828_6162_4C51_984A_E44EFC60C49E_INCLUDED_)
#define _TC_IID_125C4828_6162_4C51_984A_E44EFC60C49E_INCLUDED_
TCOM_DECL_INTERFACE("125c4828-6162-4c51-984a-e44efc60c49e", IAxisGroupInterface)
#endif // !defined(_TC_IID_125C4828_6162_4C51_984A_E44EFC60C49E_INCLUDED_)

#if !defined(_TC_IID_DFA7B551_502B_4085_88E7_A88921AF739F_INCLUDED_)
#define _TC_IID_DFA7B551_502B_4085_88E7_A88921AF739F_INCLUDED_
TCOM_DECL_INTERFACE("dfa7b551-502b-4085-88e7-a88921af739f", ISafetyInterface)
#endif // !defined(_TC_IID_DFA7B551_502B_4085_88E7_A88921AF739F_INCLUDED_)

#if !defined(_TC_IID_ECB4C8CD_4DFF_4EA0_97A5_D5D0C67E798D_INCLUDED_)
#define _TC_IID_ECB4C8CD_4DFF_4EA0_97A5_D5D0C67E798D_INCLUDED_
TCOM_DECL_INTERFACE("ecb4c8cd-4dff-4ea0-97a5-d5d0c67e798d", IScopeProcess)
#endif // !defined(_TC_IID_ECB4C8CD_4DFF_4EA0_97A5_D5D0C67E798D_INCLUDED_)

///</AutoGeneratedContent>

///<AutoGeneratedContent id="EventClasses">
#if !defined(_TC_TYPE_9DE5BE5A_9686_4F52_BC5B_71B324AA0F52_INCLUDED_)
#define _TC_TYPE_9DE5BE5A_9686_4F52_BC5B_71B324AA0F52_INCLUDED_
namespace TcEvents
{
	namespace MainEvent
	{
		CONSTEXPR const GUID EventClass = {0x9de5be5a,0x9686,0x4f52,{0xbc,0x5b,0x71,0xb3,0x24,0xaa,0x0f,0x52}};

		struct EventIds
		{
			enum
			{
					MainModuleStart =  1, //System is running
					MainModuleRpcInit =  2, //Rpc is initializing
					MainModuleManual =  4, //Main module transitis to Manual state
					MainModuleBuffering =  6, //Main module transitis to Buffering state
					MainModuleFault =  7, //Main module transitis to Fault state
					MainModuleMoving =  8, //Main module transitis to ContinuousMoving state
					MainModuleRecovery =  9, //Main module transitis to Recovery state
					MainModuleTool =  10, //Main module transitis to ToolSwitch state
					MainModuleQuitMachingAbnormally =  11, //Machining has stopped because there are no more commands
					MainModuleRecoverySpecific =  12, //Please only operate the specified Axis in Recovery mode
					MainEventEvent13 =  13, //MainEventEvent13_DisplayText
			};
		};

		CONSTEXPR const TcEventEntry MainModuleStart = { EventClass, EventIds::MainModuleStart, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleRpcInit = { EventClass, EventIds::MainModuleRpcInit, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleManual = { EventClass, EventIds::MainModuleManual, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleBuffering = { EventClass, EventIds::MainModuleBuffering, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleFault = { EventClass, EventIds::MainModuleFault, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleMoving = { EventClass, EventIds::MainModuleMoving, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleRecovery = { EventClass, EventIds::MainModuleRecovery, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleTool = { EventClass, EventIds::MainModuleTool, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleQuitMachingAbnormally = { EventClass, EventIds::MainModuleQuitMachingAbnormally, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainModuleRecoverySpecific = { EventClass, EventIds::MainModuleRecoverySpecific, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry MainEventEvent13 = { EventClass, EventIds::MainEventEvent13, TcEventSeverity::Verbose };
	};
};
#endif // !defined(_TC_TYPE_9DE5BE5A_9686_4F52_BC5B_71B324AA0F52_INCLUDED_)

#if !defined(_TC_TYPE_53F691A1_957C_475E_8011_E5BA89AE159D_INCLUDED_)
#define _TC_TYPE_53F691A1_957C_475E_8011_E5BA89AE159D_INCLUDED_
namespace TcEvents
{
	namespace SafetyEvent
	{
		CONSTEXPR const GUID EventClass = {0x53f691a1,0x957c,0x475e,{0x80,0x11,0xe5,0xba,0x89,0xae,0x15,0x9d}};

		struct EventIds
		{
			enum
			{
					SafetyNormal =  1, //System is operating normally
					SafetyAxisGroupPosUpperOver =  2, //[Warning] Axisgroup exceed position upper limit
					SafetyAxisGroupPosLowerOver =  3, //[Warning] Axisgroup exceed position lower limit
					SafetyAxisGroupVelOver =  4, //[Warning] Axisgroup exceed velocity limit
					SafetySpindleVelOver =  5, //[Warning] Spindle exceeds velocity limit
					SafetyGantryDeviationOver =  6, //[Emergency] Axisgroup gantry deviation exceeds limit
					SafetyTorqueCmdDeviationOver =  7, //[Emergency] Axisgroup torque command deviation exceeds limit
					SafetyTorFollowingError =  8, //[Emergency] Axisgroup torque following error exceeds limit
					SafetyAxisGroupHardUpperOver =  9, //[Emergency] Axisgroup trigger position hard upper limit
					SafetyAxisGroupHardLowerOver =  10, //[Emergency] Axisgroup trigger position hard lower limit
					SafetyAxisGroupStatusAbnormal =  11, //[Fault] Axisgroup driver status abnormal
					SafetySpindleStatusAbnormal =  12, //[Fault] Spindle driver status abnormal
					SafetyEventEvent13 =  13, //SafetyEventEvent13_DisplayText
					SafetyEventEvent14 =  14, //SafetyEventEvent14_DisplayText
			};
		};

		CONSTEXPR const TcEventEntry SafetyNormal = { EventClass, EventIds::SafetyNormal, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupPosUpperOver = { EventClass, EventIds::SafetyAxisGroupPosUpperOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupPosLowerOver = { EventClass, EventIds::SafetyAxisGroupPosLowerOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupVelOver = { EventClass, EventIds::SafetyAxisGroupVelOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetySpindleVelOver = { EventClass, EventIds::SafetySpindleVelOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyGantryDeviationOver = { EventClass, EventIds::SafetyGantryDeviationOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyTorqueCmdDeviationOver = { EventClass, EventIds::SafetyTorqueCmdDeviationOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyTorFollowingError = { EventClass, EventIds::SafetyTorFollowingError, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupHardUpperOver = { EventClass, EventIds::SafetyAxisGroupHardUpperOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupHardLowerOver = { EventClass, EventIds::SafetyAxisGroupHardLowerOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyAxisGroupStatusAbnormal = { EventClass, EventIds::SafetyAxisGroupStatusAbnormal, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetySpindleStatusAbnormal = { EventClass, EventIds::SafetySpindleStatusAbnormal, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry SafetyEventEvent13 = { EventClass, EventIds::SafetyEventEvent13, TcEventSeverity::Verbose };
		CONSTEXPR const TcEventEntry SafetyEventEvent14 = { EventClass, EventIds::SafetyEventEvent14, TcEventSeverity::Verbose };
	};
};
#endif // !defined(_TC_TYPE_53F691A1_957C_475E_8011_E5BA89AE159D_INCLUDED_)

#if !defined(_TC_TYPE_375A57AE_5F2C_4020_A6EA_54F5251BA406_INCLUDED_)
#define _TC_TYPE_375A57AE_5F2C_4020_A6EA_54F5251BA406_INCLUDED_
namespace TcEvents
{
	namespace AxisGroupEvent
	{
		CONSTEXPR const GUID EventClass = {0x375a57ae,0x5f2c,0x4020,{0xa6,0xea,0x54,0xf5,0x25,0x1b,0xa4,0x06}};

		struct EventIds
		{
			enum
			{
					AxisGroupPosUpperOver =  1, //[Warning] Axisgroup exceed position upper limit
					AxisGroupPosLowerOver =  2, //[Warning] Axisgroup exceed position lower limit
			};
		};

		CONSTEXPR const TcEventEntry AxisGroupPosUpperOver = { EventClass, EventIds::AxisGroupPosUpperOver, TcEventSeverity::Info };
		CONSTEXPR const TcEventEntry AxisGroupPosLowerOver = { EventClass, EventIds::AxisGroupPosLowerOver, TcEventSeverity::Info };
	};
};
#endif // !defined(_TC_TYPE_375A57AE_5F2C_4020_A6EA_54F5251BA406_INCLUDED_)

///</AutoGeneratedContent>
