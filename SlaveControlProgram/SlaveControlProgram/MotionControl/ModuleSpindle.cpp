///////////////////////////////////////////////////////////////////////////////
// ModuleSpindle.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleSpindle.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleSpindle
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleSpindle
BEGIN_INTERFACE_MAP(CModuleSpindle)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ISpindleInterface, ISpindleInterface)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CModuleSpindle)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleSpindle)
IMPLEMENT_ITCADI(CModuleSpindle)
IMPLEMENT_ITCWATCHSOURCE(CModuleSpindle)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleSpindle 
BEGIN_SETOBJPARA_MAP(CModuleSpindle)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ModuleSpindleParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleSpindle 
BEGIN_GETOBJPARA_MAP(CModuleSpindle)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ModuleSpindleParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleSpindle
BEGIN_OBJPARAWATCH_MAP(CModuleSpindle)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_ModuleSpindleParameter, m_Parameter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleSpindle
BEGIN_OBJDATAAREA_MAP(CModuleSpindle)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ModuleSpindleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ModuleSpindleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleSpindle::CModuleSpindle()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	  , m_csInstance()
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	m_CycleTime = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CModuleSpindle::~CModuleSpindle() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleSpindle)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleSpindle::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = FAILED(hr) ? hr : m_csInstance.CreateCriticalSection(OID_TCRTIME_CTRL, m_spSrv);

	hr = m_spSrv->TcCreateInstance(CID_TcFileAccess, IID_ITcFileAccess, (PPVOID)(&m_spFileAccess));
	m_Trace.Log(tlAlways, "TcCreateInstance Created - hr=0x%08x", hr);

	char xml_file_spindle[kMaxRead];

	if (SUCCEEDED(hr)) {
		m_Trace.Log(tlAlways, FNAMEA "Changing state of TcFileAccess");
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_PREOP, m_spSrv, pInitData);
		m_Trace.Log(tlAlways, FNAMEA "TcFileAccess state changed - hr=0x%08x", hr);

		UINT n_reads_spindle = ReadFile(m_SpindleConfigPath, xml_file_spindle, kMaxRead - 1);
		xml_file_spindle[n_reads_spindle] = '\0';
		if (n_reads_spindle >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}
	}
	hr = ParseFileAndAssignValue(xml_file_spindle);

	if (hr == S_OK)
	{
		m_SpindleController.MapParameters(&m_Inputs, &m_Outputs, &m_Parameter);
		hr = m_SpindleController.PostConstruction() ? S_OK : S_FALSE;
	}

	m_SpindleStateMachine->s_pController = &m_SpindleController;
	m_SpindleStateMachine->start();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleSpindle::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleSpindle::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleSpindle::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	m_csInstance.DeleteCriticalSection();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleSpindle::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	m_SpindleController.Input();

	m_SpindleStateMachine->dispatch(EventCycleUpdate());

	m_SpindleController.Output();

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleSpindle::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleSpindle::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
UINT CModuleSpindle::ReadFile(PCCH szFileNameRead, char* contents, UINT max_read)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlAlways, FENTERA "szFileNameRead=%s", szFileNameRead);

	UINT nRead = 0;
	if (contents)
	{
		TcFileHandle hFile = NULL;
		hr = m_spFileAccess->FileOpen(szFileNameRead, static_cast<TcFileAccessMode>(amBinary | amRead), &hFile);
		m_Trace.Log(tlVerbose, "FileOpen hFile ");
		if (SUCCEEDED(hr))
		{
			m_Trace.Log(tlVerbose, "FileRead hFile ");
			m_spFileAccess->FileRead(hFile, contents, max_read, &nRead);
			m_spFileAccess->FileClose(hFile);
		}
	}
	m_Trace.Log(tlAlways, FLEAVEA "total bytes read=%d", nRead);
	return nRead;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleSpindle::ParseFileAndAssignValue(const char* xml_spindle)
{
	HRESULT hr = S_OK;

	XMLDocument doc_Spindle;

	// Parse Spindle.xml
	doc_Spindle.Parse(xml_spindle);

	XMLElement* p_root_element_spindle = doc_Spindle.FirstChildElement("Spindle");
	XMLElement* p_axes_spindle = p_root_element_spindle->FirstChildElement("axes");

	while (p_axes_spindle) {
		XMLElement* p_axis_spindle = p_axes_spindle->FirstChildElement("axis");
		while (p_axis_spindle) {
			XMLElement* ptr_spindle = p_axis_spindle->FirstChildElement("AbsEncoderDir");
			m_Parameter.SpindleDriverParam.AbsEncDir = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AbsEncoderRes");
			m_Parameter.SpindleDriverParam.AbsEncRes = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("RatedCurr");
			m_Parameter.SpindleDriverParam.RatedCurrent = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("RatedTor");
			m_Parameter.SpindleDriverParam.RatedTorque = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TorDir");
			m_Parameter.SpindleDriverParam.TorDir = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AbsZeroPos");
			m_Parameter.SpindleDriverParam.AbsZeroPos = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TransmissionRatio");
			m_Parameter.SpindleDriverParam.TransmissionRatio = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TorPdoMax");
			m_Parameter.SpindleDriverParam.TorPdoMax = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AdditiveTor");
			m_Parameter.SpindleDriverParam.AdditiveTorque = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MoveType");
			m_Parameter.SpindleDriverParam.MoveType = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("DriverType");
			m_Parameter.SpindleDriverParam.DriverType = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("Exposed");
			m_Parameter.SpindleDriverParam.Exposed = bool(atoi(ptr_spindle->GetText()));

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxVelocity");
			m_Parameter.SpindleInterpolationParam.MaxVelocity = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxAcceleration");
			m_Parameter.SpindleInterpolationParam.MaxAcceleration = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxJerk");
			m_Parameter.SpindleInterpolationParam.MaxJerk = atof(ptr_spindle->GetText());

			m_Parameter.SpindleInterpolationParam.CycleTime = static_cast<double>(m_CycleTime) / 1E9; // in [s]
			m_Parameter.SpindleInterpolationParam.Tolerance = 1E-2;

			p_axis_spindle = p_axis_spindle->NextSiblingElement("axis");
		}
		p_axes_spindle = p_axes_spindle->NextSiblingElement("axes");
	}

	// Confirm all parameters have been loaded
	if (m_Parameter.SpindleDriverParam.TorPdoMax < kEpsilon)
	{
		hr = S_FALSE;
	}

	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ISpindleInterface">
HRESULT CModuleSpindle::RequestRotating(SpindleRot RotData)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	EventSpindleRotating spindle_rotating;
	spindle_rotating.spindleRot = RotData;
	m_SpindleStateMachine->dispatch(spindle_rotating);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestStop()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleStateMachine->dispatch(EventSpindleStop());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::SetVelLimit(SpindleVelLimit VelLimit)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleController.SetSpindleVelLimit(VelLimit);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestPositioning(SpindlePosition PositionData)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	EventSpindlePositioning spindle_positioning;
	spindle_positioning.spindlePosition = PositionData;
	m_SpindleStateMachine->dispatch(spindle_positioning);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::ReportCurrentState(SpindleState& curr_state)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	curr_state = m_SpindleController.GetCurrentState();

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestSpindleEnable()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleStateMachine->dispatch(EventSpindleEnable());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::IsSpindleEnable(bool& is_enable)
{
	HRESULT hr = S_OK;

	m_csInstance.EnterCriticalSection();

	SpindleState curr_state = m_SpindleController.GetCurrentState();

	is_enable = (curr_state == SpindleState::eSpindleEnable);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::IsSpindleMoving(bool& is_moving)
{
	HRESULT hr = S_OK;

	m_csInstance.EnterCriticalSection();

	SpindleState curr_state = m_SpindleController.GetCurrentState();

	is_moving = (curr_state == SpindleState::eSpindleRotating) || (curr_state == SpindleState::eSpindlePositioning);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestFault()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleStateMachine->dispatch(EventSpindleEnterFault());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestReset()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleStateMachine->dispatch(EventSpindleResetError());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleSpindle::RequestSpindleDisable()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_SpindleStateMachine->dispatch(EventSpindleDisable());

	m_csInstance.LeaveCriticalSection();
	return hr;
}
///</AutoGeneratedContent>

