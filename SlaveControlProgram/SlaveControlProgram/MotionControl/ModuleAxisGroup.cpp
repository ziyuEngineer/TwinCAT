///////////////////////////////////////////////////////////////////////////////
// ModuleAxisGroup.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleAxisGroup.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleAxisGroup
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleAxisGroup
BEGIN_INTERFACE_MAP(CModuleAxisGroup)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_IAxisGroupInterface, IAxisGroupInterface)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CModuleAxisGroup)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleAxisGroup)
IMPLEMENT_ITCADI(CModuleAxisGroup)
IMPLEMENT_ITCWATCHSOURCE(CModuleAxisGroup)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleAxisGroup 
BEGIN_SETOBJPARA_MAP(CModuleAxisGroup)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ModuleAxisGroupParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_ModuleAxisGroupPLC_SoeProcess, m_spPLC_SoeProcess)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleAxisGroup 
BEGIN_GETOBJPARA_MAP(CModuleAxisGroup)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ModuleAxisGroupParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_ModuleAxisGroupPLC_SoeProcess, m_spPLC_SoeProcess)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleAxisGroup
BEGIN_OBJPARAWATCH_MAP(CModuleAxisGroup)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_ModuleAxisGroupParameter, m_Parameter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleAxisGroup
BEGIN_OBJDATAAREA_MAP(CModuleAxisGroup)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ModuleAxisGroupInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ModuleAxisGroupOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleAxisGroup::CModuleAxisGroup()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_csInstance()
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	m_CycleTime = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CModuleAxisGroup::~CModuleAxisGroup() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleAxisGroup)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleAxisGroup::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = FAILED(hr) ? hr : m_csInstance.CreateCriticalSection(OID_TCRTIME_CTRL, m_spSrv);

	hr = m_spSrv->TcCreateInstance(CID_TcFileAccess, IID_ITcFileAccess, (PPVOID)(&m_spFileAccess));
	m_Trace.Log(tlAlways, "TcCreateInstance Created - hr=0x%08x", hr);

	char xml_file_axis_group[kMaxRead];

	if (SUCCEEDED(hr)) {
		m_Trace.Log(tlAlways, FNAMEA "Changing state of TcFileAccess");
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_PREOP, m_spSrv, pInitData);
		m_Trace.Log(tlAlways, FNAMEA "TcFileAccess state changed - hr=0x%08x", hr);

		UINT n_reads = ReadFile(m_AxisGroupConfigPath, xml_file_axis_group, kMaxRead - 1);
		xml_file_axis_group[n_reads] = '\0';
		if (n_reads >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}
	}
	hr = ParseFileAndAssignValue(xml_file_axis_group);

	if (hr == S_OK)
	{
		m_AxisGroupController.MapParameters(&m_Inputs, &m_Outputs, &m_Parameter);
		hr = m_AxisGroupController.PostConstruction() ? S_OK : S_FALSE;
	}

	m_AxisGroupStateMachine->s_pController = &m_AxisGroupController;
	m_AxisGroupStateMachine->start();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleAxisGroup::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleAxisGroup::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_spPLC_SoeProcess = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleAxisGroup::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spFileAccess != NULL)
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		spFileAccessObj->TcSetObjState(TCOM_STATE_INIT, m_spSrv, NULL);
		spFileAccessObj = NULL;
		m_spFileAccess = NULL;
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleAxisGroup::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	if (!m_IsRpcReady)
	{
		m_IsRpcReady = InitializePlcRpc();
	}
	else
	{
		m_AxisGroupController.Input();

		m_AxisGroupStateMachine->dispatch(EventCycleUpdate());

		m_AxisGroupController.Output();
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleAxisGroup::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleAxisGroup::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
UINT CModuleAxisGroup::ReadFile(PCCH szFileNameRead, char* contents, UINT max_read)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlAlways, FENTERA "szFileNameRead=%s", szFileNameRead);

	UINT nRead = 0;
	if (contents)
	{
		TcFileHandle hFile = NULL;
		hr = m_spFileAccess->FileOpen(szFileNameRead, static_cast<TcFileAccessMode>(amBinary | amRead), &hFile);
		m_Trace.Log(tlVerbose, "FileOpen hFile ");
		if (SUCCEEDED(hr))
		{
			m_Trace.Log(tlVerbose, "FileRead hFile ");
			m_spFileAccess->FileRead(hFile, contents, max_read, &nRead);
			m_spFileAccess->FileClose(hFile);
		}
	}
	m_Trace.Log(tlAlways, FLEAVEA "total bytes read=%d", nRead);
	return nRead;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleAxisGroup::ParseFileAndAssignValue(const char* xml_axis_group)
{
	HRESULT hr = S_OK;

	XMLDocument doc_AxisGroup;

	// Parse AxisGroup.xml
	doc_AxisGroup.Parse(xml_axis_group);

	XMLElement* p_root_element = doc_AxisGroup.FirstChildElement("AxisGroup");
	XMLElement* p_axes = p_root_element->FirstChildElement("axes");

	int axis_num = 0;
	int total_driver_num = 0;

	while (p_axes) {
		XMLElement* p_axis = p_axes->FirstChildElement("axis");

		int driver_num = 0;
		while (p_axis) {
			XMLElement* ptr = p_axis->FirstChildElement("AbsEncoderDir");
			m_Parameter.DriverParameter[total_driver_num].AbsEncDir = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AbsEncoderRes");
			m_Parameter.DriverParameter[total_driver_num].AbsEncRes = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("RatedCurr");
			m_Parameter.DriverParameter[total_driver_num].RatedCurrent = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("RatedTor");
			m_Parameter.DriverParameter[total_driver_num].RatedTorque = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("TorDir");
			m_Parameter.DriverParameter[total_driver_num].TorDir = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AbsZeroPos");
			m_Parameter.DriverParameter[total_driver_num].AbsZeroPos = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("TransmissionRatio");
			m_Parameter.DriverParameter[total_driver_num].TransmissionRatio = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("TorPdoMax");
			m_Parameter.DriverParameter[total_driver_num].TorPdoMax = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AdditiveTor");
			m_Parameter.DriverParameter[total_driver_num].AdditiveTorque = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("MoveType");
			m_Parameter.DriverParameter[total_driver_num].MoveType = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("DriverType");
			m_Parameter.DriverParameter[total_driver_num].DriverType = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("Exposed");
			m_Parameter.DriverParameter[total_driver_num].Exposed = bool(atoi(ptr->GetText()));

			ptr = p_axis->FirstChildElement("MaxVelocity");
			m_Parameter.AxisGroupInterpolationParam[total_driver_num].MaxVelocity = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("MaxAcceleration");
			m_Parameter.AxisGroupInterpolationParam[total_driver_num].MaxAcceleration = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("MaxJerk");
			m_Parameter.AxisGroupInterpolationParam[total_driver_num].MaxJerk = atof(ptr->GetText());

			m_Parameter.AxisGroupInterpolationParam[total_driver_num].CycleTime = static_cast<double>(m_CycleTime) / 1E9;
			m_Parameter.AxisGroupInterpolationParam[total_driver_num].Tolerance = 1E-2;

			driver_num++;
			total_driver_num++;
			m_Parameter.DriverNumPerAxis[axis_num] = driver_num;
			p_axis = p_axis->NextSiblingElement("axis");
		}
		axis_num++;
		p_axes = p_axes->NextSiblingElement("axes");
	}
	m_Parameter.TotalDriverNum = total_driver_num;
	m_Parameter.ActualAxisNum = axis_num;

	// Confirm all parameters have been loaded
	if (m_Parameter.DriverParameter[total_driver_num - 1].TorPdoMax < kEpsilon)
	{
		hr = S_FALSE;
		
		m_Parameter.TotalDriverNum = 0;
		m_Parameter.ActualAxisNum = 0;
		memcpy(&m_Parameter.DriverNumPerAxis, 0, sizeof(m_Parameter.DriverNumPerAxis));
	}

	return hr;
}

bool CModuleAxisGroup::InitializePlcRpc()
{
	bool is_initialized = false;

	if ((m_spPLC_SoeProcess == NULL) && m_Inputs.OidSoEProcess != 0)
	{
		m_spPLC_SoeProcess.SetOID(m_Inputs.OidSoEProcess);
		m_spSrv->TcQuerySmartObjectInterface(m_spPLC_SoeProcess);
	}

	if (m_spPLC_SoeProcess != NULL)
	{
		// Retrieve drive information
		is_initialized = (m_spPLC_SoeProcess->mInitialize() == S_OK) ? true : false;
		CAxisGroupController::m_pSoEProcess = m_spPLC_SoeProcess;
	}
	return is_initialized;
}

///<AutoGeneratedContent id="ImplementationOf_IAxisGroupInterface">
HRESULT CModuleAxisGroup::ReportCurrentState(AxisGroupState& curr_state)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();
	
	curr_state = m_AxisGroupController.GetCurrentState();
	
	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestEnterHandwheel()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupSelectAxis());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestQuitHandwheel()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupDeselectAxis());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestContinuousMoving()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupContinuouslyMove());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestStop()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupStop());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestAxisGroupEnable()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupServoOn());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestAxisGroupDisable()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupDisable());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestReset()
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupResetError());

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestChangeOpMode(OpMode mode)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	EventAxisGroupPreMovingChangeOpMode event;
	event.requestMode = mode;
	m_AxisGroupStateMachine->dispatch(event);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::IsAxisGroupStandby(bool& is_standby)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	AxisGroupState curr_state = m_AxisGroupController.GetCurrentState();
	is_standby = (curr_state == AxisGroupState::eAxisGroupStandby);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::IsAxisGroupMoving(bool& is_moving)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	AxisGroupState curr_state = m_AxisGroupController.GetCurrentState();
	is_moving = (curr_state == AxisGroupState::eAxisGroupContinuousMoving);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::IsAxisGroupOpModeSwitched(bool& is_switched)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	is_switched = m_AxisGroupController.IsAxisGroupOpModeSwitched();

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::IsAxisGroupDisabled(bool& is_disabled)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	AxisGroupState curr_state = m_AxisGroupController.GetCurrentState();
	is_disabled = (curr_state == AxisGroupState::eAxisGroupDisabled);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::IsAxisGroupManualMoving(bool& is_manual)
{
	HRESULT hr = S_OK;
	m_csInstance.EnterCriticalSection();

	AxisGroupState curr_state = m_AxisGroupController.GetCurrentState();
	is_manual = (curr_state == AxisGroupState::eAxisGroupManualMoving);

	m_csInstance.LeaveCriticalSection();
	return hr;
}

HRESULT CModuleAxisGroup::RequestFault()
{
	HRESULT hr = S_OK;

	m_csInstance.EnterCriticalSection();

	m_AxisGroupStateMachine->dispatch(EventAxisGroupEnterFault());

	m_csInstance.LeaveCriticalSection();

	return hr;
}
///</AutoGeneratedContent>
