///////////////////////////////////////////////////////////////////////////////
// MotionControl.h
#pragma once

#include "MotionControlInterfaces.h"
#include "MainStateMachine.h"
#include "MainController.h"

class CMotionControl 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public IMotionControlInterface
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_MotionControlCMotionControl)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CMotionControl();
	virtual	~CMotionControl();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// IMotionControlInterface
	virtual HRESULT TCOMAPI ExecuteCommandsContinuously(SHORT n_min_data_start, SHORT& buffer_size, char op_mode);
	virtual HRESULT TCOMAPI EnterRecoveryState(bool is_entered);
	virtual HRESULT TCOMAPI RequestStop();
	virtual HRESULT TCOMAPI EnterFaultState();
	virtual HRESULT TCOMAPI ExitFaultState();
	virtual HRESULT TCOMAPI EnterStandbyState();
	virtual HRESULT TCOMAPI EnterDisabledState();
	virtual HRESULT TCOMAPI ScopeInitialize();
	virtual HRESULT TCOMAPI ScopeStartRecord();
	virtual HRESULT TCOMAPI ScopeStopRecord();
	virtual HRESULT TCOMAPI ScopeExportData();

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// PLC RPC related
	bool InitializePlcRpc();
	bool m_IsRpcReady = false;

	// Other module RPC
	bool InitializeOtherModuleRpc();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	bool m_Parameter;
	MotionControlInputs m_Inputs;
	MotionControlOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	IPanelProcessPtr m_spPLC_PanelProcess;
	ISpindleInterfacePtr m_spModuleSpindle_Interface;
	IAxisGroupInterfacePtr m_spModuleAxisGroup_Interface;
	IScopeProcessPtr m_spPLC_ScopeProcess;
///</AutoGeneratedContent>

	CMainController m_Controller;
	MainStateMachine* m_MainStateMachine;
};
