///////////////////////////////////////////////////////////////////////////////
// ModuleSafety.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleSafety.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleSafety
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleSafety
BEGIN_INTERFACE_MAP(CModuleSafety)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ISafetyInterface, ISafetyInterface)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CModuleSafety)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleSafety)
IMPLEMENT_ITCADI(CModuleSafety)
IMPLEMENT_ITCWATCHSOURCE(CModuleSafety)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleSafety 
BEGIN_SETOBJPARA_MAP(CModuleSafety)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ModuleSafetyParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_ModuleSafetyMainModule_Interface, m_spMainModule_Interface)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleSafety 
BEGIN_GETOBJPARA_MAP(CModuleSafety)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ModuleSafetyParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_ModuleSafetyMainModule_Interface, m_spMainModule_Interface)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleSafety
BEGIN_OBJPARAWATCH_MAP(CModuleSafety)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_ModuleSafetyParameter, m_Parameter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleSafety
BEGIN_OBJDATAAREA_MAP(CModuleSafety)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ModuleSafetyInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ModuleSafetyOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleSafety::CModuleSafety()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_csInstance()
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CModuleSafety::~CModuleSafety() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleSafety)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleSafety::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = FAILED(hr) ? hr : m_csInstance.CreateCriticalSection(OID_TCRTIME_CTRL, m_spSrv);

	hr = m_spSrv->TcCreateInstance(CID_TcFileAccess, IID_ITcFileAccess, (PPVOID)(&m_spFileAccess));
	m_Trace.Log(tlAlways, "TcCreateInstance Created - hr=0x%08x", hr);
	char xmlFile_AxisGroup[kMaxRead];
	char xmlFile_Spindle[kMaxRead];
	if (SUCCEEDED(hr)) {
		m_Trace.Log(tlAlways, FNAMEA "Changing state of TcFileAccess");
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_PREOP, m_spSrv, pInitData);
		m_Trace.Log(tlAlways, FNAMEA "TcFileAccess state changed - hr=0x%08x", hr);

		UINT n_reads = ReadFile(m_AxisGroupConfigPath, xmlFile_AxisGroup, kMaxRead - 1);
		xmlFile_AxisGroup[n_reads] = '\0';
		if (n_reads >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}
		UINT n_reads_spindle = ReadFile(m_SpindleConfigPath, xmlFile_Spindle, kMaxRead - 1);
		xmlFile_Spindle[n_reads_spindle] = '\0';
		if (n_reads_spindle >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}
	}

	hr = ParseFileAndAssignValue(xmlFile_AxisGroup, xmlFile_Spindle);

	/*if (hr == S_OK)
	{
		m_SafetyController.MapParameters(&m_Inputs, &m_Outputs, &m_Parameter);
	}*/
	m_SafetyController.MapParameters(&m_Inputs, &m_Outputs, &m_Parameter);

	m_SafetyStateMachine->s_pController = &m_SafetyController;
	m_SafetyStateMachine->start();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleSafety::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleSafety::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleSafety::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spFileAccess != NULL)
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		spFileAccessObj->TcSetObjState(TCOM_STATE_INIT, m_spSrv, NULL);
		spFileAccessObj = NULL;
		m_spFileAccess = NULL;
	}

	m_spMainModule_Interface = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleSafety::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	if (!m_IsRpcReady)
	{
		m_IsRpcReady = InitializeOtherModuleRpc();
	}
	else
	{
		m_SafetyController.Input();

		m_SafetyStateMachine->dispatch(EventCycleUpdate());
		
		m_SafetyController.Output();
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleSafety::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleSafety::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
UINT CModuleSafety::ReadFile(PCCH szFileNameRead, char* contents, UINT max_read)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlAlways, FENTERA "szFileNameRead=%s", szFileNameRead);

	UINT nRead = 0;
	if (contents)
	{
		TcFileHandle hFile = NULL;
		hr = m_spFileAccess->FileOpen(szFileNameRead, static_cast<TcFileAccessMode>(amBinary | amRead), &hFile);
		m_Trace.Log(tlVerbose, "FileOpen hFile ");
		if (SUCCEEDED(hr))
		{
			m_Trace.Log(tlVerbose, "FileRead hFile ");
			m_spFileAccess->FileRead(hFile, contents, max_read, &nRead);
			m_spFileAccess->FileClose(hFile);
		}
	}
	m_Trace.Log(tlAlways, FLEAVEA "total bytes read=%d", nRead);
	return nRead;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleSafety::ParseFileAndAssignValue(const char* xml_axis_group, const char* xml_spindle)
{
	HRESULT hr = S_FALSE;
	XMLDocument doc_AxisGroup;
	XMLDocument doc_Spindle;

	// Parse AxisGroup.xml
	doc_AxisGroup.Parse(xml_axis_group);
	XMLElement* p_root_element = doc_AxisGroup.FirstChildElement("AxisGroup");
	XMLElement* p_axes = p_root_element->FirstChildElement("axes");

	int axis_num = 0;
	int total_driver_num = 0;

	while (p_axes) {
		XMLElement* p_axis = p_axes->FirstChildElement("axis");
		XMLElement* p_gantry = p_axes->FirstChildElement("gantry");

		int driver_num = 0;
		while (p_axis) {
			XMLElement* ptr = p_axis->FirstChildElement("UpperPosLimit");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].PosUpperLimit = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("LowerPosLimit");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].PosLowerLimit = atof(ptr->GetText());
	
			ptr = p_axis->FirstChildElement("MaxVelocity");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].MaxVelocity = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("MaxAcceleration");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].MaxAcceleration = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("FollowingError");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].FollowingError = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("PositiveBit");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].PositiveHardBit = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("NegativeBit");
			m_Parameter.SafetyParameterAxisGroup[total_driver_num].NegativeHardBit = atoi(ptr->GetText());

			driver_num++;
			total_driver_num++;
			m_Parameter.DriverNumPerAxis[axis_num] = driver_num;

			p_axis = p_axis->NextSiblingElement("axis");
		}
		axis_num++;

		while (p_gantry) {
			XMLElement* ptr_gantry = p_gantry->FirstChildElement("IsGantry");
			for (int i = total_driver_num - driver_num; i < total_driver_num; i++)
			{
				m_Parameter.SafetyParameterAxisGroup[i].IsGantry = bool(atoi(ptr_gantry->GetText()));
			}

			ptr_gantry = p_gantry->FirstChildElement("GantryDeviationTolerance");
			for (int j = total_driver_num - driver_num; j < total_driver_num; j++)
			{
				m_Parameter.SafetyParameterAxisGroup[j].GantryDeviationTolerance = atof(ptr_gantry->GetText());
			}

			p_gantry = p_gantry->NextSiblingElement("gantry");
		}

		p_axes = p_axes->NextSiblingElement("axes");
	}
	m_Parameter.ActualDriverNum = total_driver_num;
	m_Parameter.ActualAxisNum = axis_num;

	// Parse Spindle.xml
	doc_Spindle.Parse(xml_spindle);
	XMLElement* p_root_element_spindle = doc_Spindle.FirstChildElement("Spindle");
	XMLElement* p_axes_spindle = p_root_element_spindle->FirstChildElement("axes");
	while (p_axes_spindle) {
		XMLElement* p_axis_spindle = p_axes_spindle->FirstChildElement("axis");
		while (p_axis_spindle) {
			XMLElement* ptr_spindle = p_axis_spindle->FirstChildElement("UpperPosLimit");
			m_Parameter.SafetyParameterSpindle.PosUpperLimit = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("LowerPosLimit");
			m_Parameter.SafetyParameterSpindle.PosLowerLimit = atof(ptr_spindle->GetText());
		
			ptr_spindle = p_axis_spindle->FirstChildElement("MaxVelocity");
			m_Parameter.SafetyParameterSpindle.MaxVelocity = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxAcceleration");
			m_Parameter.SafetyParameterSpindle.MaxAcceleration = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("FollowingError");
			m_Parameter.SafetyParameterSpindle.FollowingError = atof(ptr_spindle->GetText());

			p_axis_spindle = p_axis_spindle->NextSiblingElement("axis");
		}
		p_axes_spindle = p_axes_spindle->NextSiblingElement("axes");
	}

	// Confirm all parameters have been loaded
	hr = S_OK;
	return hr;
}

bool CModuleSafety::InitializeOtherModuleRpc()
{
	bool is_initialized = false;

	if ((m_spSrv->TcQuerySmartObjectInterface(m_spMainModule_Interface) == S_OK))
	{
		CSafetyController::m_pMainModuleInterface = m_spMainModule_Interface;
		is_initialized = true;
	}

	return is_initialized;
}

///<AutoGeneratedContent id="ImplementationOf_ISafetyInterface">
HRESULT CModuleSafety::EnterRecoveryState()
{
	HRESULT hr = (HRESULT)ADSERR_NOERR;

	m_SafetyStateMachine->dispatch(EventRequestSafetyEnterRecoveryState());

	return hr;
}

HRESULT CModuleSafety::LeaveRecoveryState()
{
	HRESULT hr = (HRESULT)ADSERR_NOERR;

	m_SafetyStateMachine->dispatch(EventRequestSafetyExitRecoveryState());

	return hr;
}
///</AutoGeneratedContent>
