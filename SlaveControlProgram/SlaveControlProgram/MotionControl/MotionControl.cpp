///////////////////////////////////////////////////////////////////////////////
// MotionControl.cpp
#include "TcPch.h"
#pragma hdrstop

#include "MotionControl.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CMotionControl
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CMotionControl
BEGIN_INTERFACE_MAP(CMotionControl)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_InterfaceRPC, InterfaceRPC)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CMotionControl)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CMotionControl)
IMPLEMENT_ITCADI(CMotionControl)
IMPLEMENT_ITCWATCHSOURCE(CMotionControl)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CMotionControl 
BEGIN_SETOBJPARA_MAP(CMotionControl)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_MotionControlParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_MotionControlPLC_SoEProcess, m_spPLC_SoEProcess)
	SETOBJPARA_ITFPTR(PID_MotionControlPLC_PanelProcess, m_spPLC_PanelProcess)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CMotionControl 
BEGIN_GETOBJPARA_MAP(CMotionControl)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_MotionControlParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_MotionControlPLC_SoEProcess, m_spPLC_SoEProcess)
	GETOBJPARA_ITFPTR(PID_MotionControlPLC_PanelProcess, m_spPLC_PanelProcess)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CMotionControl
BEGIN_OBJPARAWATCH_MAP(CMotionControl)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_MotionControlParameter, m_Parameter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CMotionControl
BEGIN_OBJDATAAREA_MAP(CMotionControl)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_MotionControlInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_MotionControlOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CMotionControl::CMotionControl()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	m_CycleTime = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CMotionControl::~CMotionControl() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CMotionControl)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CMotionControl::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = m_spSrv->TcCreateInstance(CID_TcFileAccess, IID_ITcFileAccess, (PPVOID)(&m_spFileAccess));
	m_Trace.Log(tlAlways, "TcCreateInstance Created - hr=0x%08x", hr);

	char xmlFile_AxisGroup[kMaxRead];
	char xmlFile_Spindle[kMaxRead];

	if (SUCCEEDED(hr)) {
		m_Trace.Log(tlAlways, FNAMEA "Changing state of TcFileAccess");
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_PREOP, m_spSrv, pInitData);
		m_Trace.Log(tlAlways, FNAMEA "TcFileAccess state changed - hr=0x%08x", hr);

		UINT n_reads = ReadFile(m_AxisGroupConfigPath, xmlFile_AxisGroup, kMaxRead - 1);
		xmlFile_AxisGroup[n_reads] = '\0';
		if (n_reads >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}

		UINT n_reads_spindle = ReadFile(m_SpindleConfigPath, xmlFile_Spindle, kMaxRead - 1);
		xmlFile_Spindle[n_reads_spindle] = '\0';
		if (n_reads_spindle >= kMaxRead - 1) {
			m_Trace.Log(tlError, "The configuration file has larger size than the preconfigured one %d!", kMaxRead);
			return S_FALSE;
		}
	}
	hr = ParseFileAndAssignValue(xmlFile_AxisGroup, xmlFile_Spindle);

	if (hr == S_OK)
	{
		m_Controller.MapParameters(&m_Inputs, &m_Outputs, &m_Parameter);
		hr = m_Controller.PostConstruction() ? S_OK : S_FALSE;
	}

	AxisGroupStateMachine::s_pController = &m_Controller;
	SpindleStateMachine::s_pController = &m_Controller;
	m_FsmHandle::start();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CMotionControl::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 
	
	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CMotionControl::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// Deinitialization
	m_spPLC_SoEProcess = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CMotionControl::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spFileAccess != NULL)
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		spFileAccessObj->TcSetObjState(TCOM_STATE_INIT, m_spSrv, NULL);
		spFileAccessObj = NULL;
		m_spFileAccess = NULL;
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CMotionControl::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	
	if(!m_PlcRpcReady)
	{
		m_PlcRpcReady = InitializePlcRpc();
	}
	else
	{
		m_Controller.Input();
		m_Controller.CommonModuleProcess();

		m_FsmHandle::dispatch(Cycle_Update());

		m_Controller.Output();
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CMotionControl::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CMotionControl::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
UINT CMotionControl::ReadFile(PCCH szFileNameRead, char* contents, UINT max_read)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlAlways, FENTERA "szFileNameRead=%s", szFileNameRead);

	UINT nRead = 0;
	if (contents)
	{
		TcFileHandle hFile = NULL;
		hr = m_spFileAccess->FileOpen(szFileNameRead, static_cast<TcFileAccessMode>(amBinary | amRead), &hFile);
		m_Trace.Log(tlVerbose, "FileOpen hFile ");
		if (SUCCEEDED(hr))
		{
			m_Trace.Log(tlVerbose, "FileRead hFile ");
			m_spFileAccess->FileRead(hFile, contents, max_read, &nRead);
			m_spFileAccess->FileClose(hFile);
		}
	}
	m_Trace.Log(tlAlways, FLEAVEA "total bytes read=%d", nRead);
	return nRead;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CMotionControl::ParseFileAndAssignValue(const char* _xml_group, const char* _xml_spindle)
{
	HRESULT hr = S_OK;

	XMLDocument doc_AxisGroup;
	XMLDocument doc_Spindle;

	// Parse AxisGroup.xml
	doc_AxisGroup.Parse(_xml_group);

	XMLElement* p_root_element = doc_AxisGroup.FirstChildElement("AxisGroup");
	XMLElement* p_axes = p_root_element->FirstChildElement("axes");
	
	int driver_num = 0;
	int axis_num = 0;

	while (p_axes) {
		XMLElement* p_axis = p_axes->FirstChildElement("axis");
		while (p_axis) {
			XMLElement* ptr = p_axis->FirstChildElement("AbsEncoderDir");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].AbsEncDir = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AbsEncoderRes");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].AbsEncRes = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("RatedCurr");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].RatedCurrent = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("RatedTor");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].RatedTorque = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("TorDir");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].TorDir = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AbsZeroPos");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].AbsZeroPos = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("UpperPosLimit");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].PosUpperLimit = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("LowerPosLimit");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].PosLowerLimit = atol(ptr->GetText());

			ptr = p_axis->FirstChildElement("TransmissionRatio");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].TransmissionRatio = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("TorPdoMax");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].TorPdoMax = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AdditiveTor");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].AdditiveTorque = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("AbsEncodertype");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].AbsEncType = bool(atoi(ptr->GetText()));

			ptr = p_axis->FirstChildElement("PositiveHardBit");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].PositiveHardBit = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("NegativeHardBit");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].NegativeHardBit = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("DriverType");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].DriverType = atoi(ptr->GetText());

			ptr = p_axis->FirstChildElement("Exposed");
			m_Parameter.DriverParameter[kAxisDriverTotalNum].Exposed = bool(atoi(ptr->GetText()));

			ptr = p_axis->FirstChildElement("MaxVelocity");
			m_Parameter.AxisGroupInterpolationParam[kAxisDriverTotalNum].MaxVelocity = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("MaxAcceleration");
			m_Parameter.AxisGroupInterpolationParam[kAxisDriverTotalNum].MaxAcceleration = atof(ptr->GetText());

			ptr = p_axis->FirstChildElement("MaxJerk");
			m_Parameter.AxisGroupInterpolationParam[kAxisDriverTotalNum].MaxJerk = atof(ptr->GetText());

			m_Parameter.AxisGroupInterpolationParam[kAxisDriverTotalNum].CycleTime = static_cast<double>(m_CycleTime) / 1E9;
			m_Parameter.AxisGroupInterpolationParam[kAxisDriverTotalNum].Tolerance = 1E-2;

			driver_num++;
			kDriverNumPerAxis[axis_num] = driver_num;
			kAxisDriverTotalNum++;
			p_axis = p_axis->NextSiblingElement("axis");
		}
		driver_num = 0;
		axis_num++;
		
		p_axes = p_axes->NextSiblingElement("axes");
	}
	kActualAxisNum = axis_num;

	// Parse Spindle.xml
	doc_Spindle.Parse(_xml_spindle);

	XMLElement* p_root_element_spindle = doc_Spindle.FirstChildElement("Spindle");
	XMLElement* p_axes_spindle = p_root_element_spindle->FirstChildElement("axes");

	while (p_axes_spindle) {
		XMLElement* p_axis_spindle = p_axes_spindle->FirstChildElement("axis");
		while (p_axis_spindle) {
			XMLElement* ptr_spindle = p_axis_spindle->FirstChildElement("AbsEncoderDir");
			m_Parameter.SpindleDriverParam.AbsEncDir = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AbsEncoderRes");
			m_Parameter.SpindleDriverParam.AbsEncRes = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("RatedCurr");
			m_Parameter.SpindleDriverParam.RatedCurrent = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("RatedTor");
			m_Parameter.SpindleDriverParam.RatedTorque = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TorDir");
			m_Parameter.SpindleDriverParam.TorDir = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AbsZeroPos");
			m_Parameter.SpindleDriverParam.AbsZeroPos = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("UpperPosLimit");
			m_Parameter.SpindleDriverParam.PosUpperLimit = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("LowerPosLimit");
			m_Parameter.SpindleDriverParam.PosLowerLimit = atol(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TransmissionRatio");
			m_Parameter.SpindleDriverParam.TransmissionRatio = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("TorPdoMax");
			m_Parameter.SpindleDriverParam.TorPdoMax = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AdditiveTor");
			m_Parameter.SpindleDriverParam.AdditiveTorque = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("AbsEncodertype");
			m_Parameter.SpindleDriverParam.AbsEncType = bool(atoi(ptr_spindle->GetText()));

			ptr_spindle = p_axis_spindle->FirstChildElement("PositiveHardBit");
			m_Parameter.SpindleDriverParam.PositiveHardBit = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("NegativeHardBit");
			m_Parameter.SpindleDriverParam.NegativeHardBit = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("DriverType");
			m_Parameter.SpindleDriverParam.DriverType = atoi(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("Exposed");
			m_Parameter.SpindleDriverParam.Exposed = bool(atoi(ptr_spindle->GetText()));

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxVelocity");
			m_Parameter.SpindleInterpolationParam.MaxVelocity = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxAcceleration");
			m_Parameter.SpindleInterpolationParam.MaxAcceleration = atof(ptr_spindle->GetText());

			ptr_spindle = p_axis_spindle->FirstChildElement("MaxJerk");
			m_Parameter.SpindleInterpolationParam.MaxJerk = atof(ptr_spindle->GetText());

			m_Parameter.SpindleInterpolationParam.CycleTime = static_cast<double>(m_CycleTime) / 1E9; // in [s]
			m_Parameter.SpindleInterpolationParam.Tolerance = 1E-2;

			p_axis_spindle = p_axis_spindle->NextSiblingElement("axis");
		}
		p_axes_spindle = p_axes_spindle->NextSiblingElement("axes");
	}

	// Confirm all parameters have been loaded
	if (m_Parameter.DriverParameter[kAxisDriverTotalNum - 1].TorPdoMax < kEpsilon
		&& m_Parameter.SpindleDriverParam.TorPdoMax < kEpsilon)
	{
		hr = S_FALSE;
		kAxisDriverTotalNum = 0;
		kActualAxisNum = 0;
		memcpy(&kDriverNumPerAxis, 0, sizeof(kDriverNumPerAxis));
	}

	return hr;
}

bool CMotionControl::InitializePlcRpc()
{
	bool bRet = false;
	
	if ((m_spPLC_SoEProcess == NULL) && m_Inputs.OidSoEProcess != 0)
	{
		m_spPLC_SoEProcess.SetOID(m_Inputs.OidSoEProcess);
		m_spSrv->TcQuerySmartObjectInterface(m_spPLC_SoEProcess);
	}
	 
	if (m_spPLC_SoEProcess != NULL)
	{
		// Retrieve drive information
		bRet = (m_spPLC_SoEProcess->mInitialize() == S_OK) ? true : false;
		CFiveAxisController::m_pSoEProcess = m_spPLC_SoEProcess;
		bRet = true;
	}

	if ((m_spPLC_PanelProcess == NULL) && m_Inputs.OidPanelProcess != 0)
	{
		m_spPLC_PanelProcess.SetOID(m_Inputs.OidPanelProcess);
		m_spSrv->TcQuerySmartObjectInterface(m_spPLC_PanelProcess);
		bRet = false;
	}

	if (m_spPLC_PanelProcess != NULL)
	{
		bRet = (m_spPLC_PanelProcess->mInitialize() == S_OK) ? true : false;
		CFiveAxisController::m_pPanelProcess = m_spPLC_PanelProcess;
		bRet = true;
	}
	
	return bRet;
}

///<AutoGeneratedContent id="ImplementationOf_InterfaceRPC">
HRESULT CMotionControl::ExecuteCommandsContinuously(SHORT n_min_data_start, SHORT& buffer_size)
{
	HRESULT hr;

	buffer_size = m_Controller.GetBufferSize();

	hr = m_Controller.SetBufferStartLength(n_min_data_start) ? (HRESULT)ADSERR_NOERR : (HRESULT)ADSERR_DEVICE_ERROR;

	if (!m_Controller.IsReadyToMove())
	{
		return (HRESULT)ADSERR_DEVICE_BUSY;
	}

	if (!m_Controller.IsReadyToReceiveCmd())
	{
		return (HRESULT)ADSERR_DEVICE_INVALIDDATA;
	}

	return hr;
}

HRESULT CMotionControl::EnterRecoveryState(bool b_Enter)
{
	HRESULT hr = (HRESULT)ADSERR_NOERR;
	m_Controller.SetRecoveryFlag(b_Enter);
	return hr;
}
///</AutoGeneratedContent>

