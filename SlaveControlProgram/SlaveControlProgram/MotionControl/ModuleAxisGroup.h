///////////////////////////////////////////////////////////////////////////////
// ModuleAxisGroup.h
#pragma once

#include "MotionControlInterfaces.h"
#include "AxisGroupController.h"
#include "AxisGroupStateMachine.h"
#include "TcFileAccessInterfaces.h"
#include "tinyxml2.h"
#include "TcRtInterfaces.h"

using namespace tinyxml2;

class CModuleAxisGroup 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public IAxisGroupInterface
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_MotionControlCModuleAxisGroup)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CModuleAxisGroup();
	virtual	~CModuleAxisGroup();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// IAxisGroupInterface
	virtual HRESULT TCOMAPI ReportCurrentState(AxisGroupState& curr_state);
	virtual HRESULT TCOMAPI RequestEnterHandwheel();
	virtual HRESULT TCOMAPI RequestQuitHandwheel();
	virtual HRESULT TCOMAPI RequestContinuousMoving();
	virtual HRESULT TCOMAPI RequestStop();
	virtual HRESULT TCOMAPI RequestAxisGroupEnable();
	virtual HRESULT TCOMAPI RequestAxisGroupDisable();
	virtual HRESULT TCOMAPI RequestReset();
	virtual HRESULT TCOMAPI RequestRecovery(bool is_entered);
	virtual HRESULT TCOMAPI RequestChangeOpMode(OpMode mode);
	virtual HRESULT TCOMAPI IsAxisGroupStandby(bool& is_standby);
	virtual HRESULT TCOMAPI IsAxisGroupMoving(bool& is_moving);
	virtual HRESULT TCOMAPI IsAxisGroupOpModeSwitched(bool& is_switched);
	virtual HRESULT TCOMAPI IsAxisGroupDisabled(bool& is_disabled);
	virtual HRESULT TCOMAPI IsAxisGroupManualMoving(bool& is_manual);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Xml related variables
	UINT ReadFile(PCCH szFileNameRead, char* contents, UINT max_read);
	HRESULT ParseFileAndAssignValue(const char* xml_axis_group);
	ITcFileAccessPtr m_spFileAccess;
	PCCH m_AxisGroupConfigPath = "%TC_RESOURCEPATH%AxisGroup.xml";

	// PLC RPC related
	bool InitializePlcRpc();
	bool m_IsRpcReady = false;

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	ModuleAxisGroupParameter m_Parameter;
	ULONG m_CycleTime;
	ModuleAxisGroupInputs m_Inputs;
	ModuleAxisGroupOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ISoEProcessPtr m_spPLC_SoeProcess;
///</AutoGeneratedContent>

	CAxisGroupController m_AxisGroupController;
	AxisGroupStateMachine* m_AxisGroupStateMachine;

	// CriticalSections are described in the SDK in TcRtInterfaces.h and are therefore intended for the real-time context.
	CCriticalSectionInstance m_csInstance;
};
